<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <FileVersion>2.43</FileVersion>
   <DriverName>AgMD1.AgMD1</DriverName>
   <DriverType>MATLAB IVI-COM</DriverType>
   <InstrumentType>IAgMD1Ex2</InstrumentType>
   <InstrumentManufacturer>Agilent Technologies</InstrumentManufacturer>
   <InstrumentModel>AgMD1</InstrumentModel>
   <InstrumentVersion>1.0</InstrumentVersion>
   <Identify>*IDN?</Identify>
   <Reset>*RST</Reset>
   <Selftest>*TST?</Selftest>
   <Error>System:Error?</Error>
   <CreateInitCode>
      <Code>function init(obj)
% This function is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
ictver = ver('instrument');
splittedVer = regexp (ictver.Version , '\.', 'split');
if (~isempty(splittedVer) &amp;&amp; (str2num(char(splittedVer(1))) &lt; 2 || (str2num(char(splittedVer(1))) == 2 &amp;&amp; str2num(char(splittedVer(2))) &lt;= 6)))
   error('instrument:icdevice:newerdriver','This driver requires Instrument Control ToolBox version 2.7.0 (R2008B) or later');
end
</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>MCode</Type>
      <Code>function init(obj)
% This function is called after the object is connected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </ConnectInitCode>
   <CleanupCode>
      <Type>MCode</Type>
      <Code>function cleanup(obj)
% This function is called before the object is disconnected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Initialized</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Interface;
	propertyValue = comobj.Initialized;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Initialized is True between a successful call to the Initialize method and a successful call to the Close method, and False at all other times.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Close</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Close(obj)

comobj = obj.Interface;
feature('COM_SafeArraySingleDim',1);
comobj.Close();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Closes the I/O session to the instrument.  Driver methods and properties that access the instrument are not accessible after Close is called.</Description>
            </Method>
            <Method>
               <Name>Initialize</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Initialize(obj, ResourceName, IdQuery, Reset, OptionString)

comobj = obj.Interface;
feature('COM_SafeArraySingleDim',1);
comobj.Initialize(ResourceName, logical(IdQuery), logical(Reset), OptionString);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Opens the I/O session to the instrument.  Driver methods and properties that access the instrument are only accessible after Initialize is called.  Initialize optionally performs a Reset and queries the instrument to validate the instrument model.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>acquisition</Name>
         <Description>AgMD1 instrument-specific acquistion interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Acquisition1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AcquisitionType</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1AcquisitionTypeNormal" Value="AgMD1AcquisitionTypeNormal"/>
                     <Enum Name="AgMD1AcquisitionTypeAverage" Value="AgMD1AcquisitionTypeAverage"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1AcquisitionTypeNormal</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>How the oscilloscope acquires data and fills the waveform record.  When set to TypeAverage, averaged waveforms must be read uisng the Measurement ReadWaveform methods.  Averaging is not supported (ignored) by all FetchWaveform methods.</Description>
            </Property>
            <Property>
               <Name>DitherEnabled</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.DitherEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.DitherEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>If true, enables dithering.  Requires model: M9202A</Description>
            </Property>
            <Property>
               <Name>DitherRange</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.DitherRange;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.DitherRange = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets amplitude of dithering signal.  Range: 0 to 31.  0 = dithering amplitude is 0 (i. e. no dithering).  31 = dithering amplitude is Full Scale/2 = 500 mV.  Requires model: M9202A</Description>
            </Property>
            <Property>
               <Name>MaxFirstValidPointValue</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.MaxFirstValidPointValue;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.MaxFirstValidPointValue = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Returns the maximum value that the First Valid Point parameter of the readout functions may assume. This value is necessary to calculate the minimum size of the required data buffer to retrieved the entire acquisition.</Description>
            </Property>
            <Property>
               <Name>MaxSamplesPerChannel</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.MaxSamplesPerChannel;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the maximum number of samples per channel that can be captured.</Description>
            </Property>
            <Property>
               <Name>MinRecordSize</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.MinRecordSize;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.MinRecordSize = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Indicates the minimum waveform record size.  If the digitizer can support any arbitrary size record, then this attribute returns 1.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1AcquisitionModeNormal" Value="AgMD1AcquisitionModeNormal"/>
                     <Enum Name="AgMD1AcquisitionModeDownconverter" Value="AgMD1AcquisitionModeDownconverter"/>
                     <Enum Name="AgMD1AcquisitionModeCounter" Value="AgMD1AcquisitionModeCounter"/>
                     <Enum Name="AgMD1AcquisitionModeUserFDK" Value="AgMD1AcquisitionModeUserFDK"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1AcquisitionModeNormal</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The acquisition mode, Normal digitizer or digital Downconverter.   Downconverter mode requires model: M9202A</Description>
            </Property>
            <Property>
               <Name>NumAcquiredRecords</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.NumAcquiredRecords;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Gets the total number of records acquired since the acquistion was last initiated.  You may call this method while an acquisition is in progress.</Description>
            </Property>
            <Property>
               <Name>NumberOfAverages</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.NumberOfAverages;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.NumberOfAverages = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The number of waveforms the digitizer acquires and averages before returning to the idle state.  Averaged waveforms must be read uisng the Measurement.ReadWaveform methods.  Averaging is not supported (ignored) by all FetchWaveform methods.  Averaging is </Description>
            </Property>
            <Property>
               <Name>NumRecordsToAcquire</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.NumRecordsToAcquire;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.NumRecordsToAcquire = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the number of waveform records to acquire.  One waveform record is acquired for each recognized trigger.</Description>
            </Property>
            <Property>
               <Name>RecordSize</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.RecordSize;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.RecordSize = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the number of samples to acquire in each waveform record.</Description>
            </Property>
            <Property>
               <Name>SampleMode</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.SampleMode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.SampleMode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1SampleModeRealTime" Value="AgMD1SampleModeRealTime"/>
                     <Enum Name="AgMD1SampleModeEquivalentTime" Value="AgMD1SampleModeEquivalentTime"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1SampleModeRealTime</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>-- Always RealTime mode -- Specifies the sample mode used by the digitizer.</Description>
            </Property>
            <Property>
               <Name>SampleRate</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.SampleRate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.SampleRate = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the rate of the sample clock in samples per second.  This number represents the inverse of the interval between samples in the acquisition record.</Description>
            </Property>
            <Property>
               <Name>StartTime</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.StartTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.StartTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The length of time from the trigger event to the first point in the waveform record.  The units are seconds.  If positive, the first point in the waveform occurs after the trigger.  If negative, the first point in the waveform occurs before the trigger.</Description>
            </Property>
            <Property>
               <Name>TimeInterleavedChannelListAuto</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.TimeInterleavedChannelListAuto;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.TimeInterleavedChannelListAuto = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>-- Always false -- Specifies whether or not the instrument should automatically combine enabled channels to satisfy user-specified sample rates.  When set to True, the instrument will automatically combine channels to meet the sample rate requirements spe</Description>
            </Property>
            <Property>
               <Name>TimePerRecord</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.TimePerRecord;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.TimePerRecord = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The time in seconds that corresponds to the record length.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Abort</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Abort(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition;
feature('COM_SafeArraySingleDim',1);
comobj.Abort();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Aborts an acquisition and returns the digitizer to the Idle state.</Description>
            </Method>
            <Method>
               <Name>ConfigureAcquisition</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureAcquisition(obj, NumRecordsToAcquire, RecordSize, SampleRate)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureAcquisition(int64(NumRecordsToAcquire), int64(RecordSize), double(SampleRate));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the most commonly configured attributes of the digitizer acquisition sub-system. These attributes are the samples per record, the number of records, and the sample rate.</Description>
            </Method>
            <Method>
               <Name>ConfigureRecord</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureRecord(obj, TimePerRecord, MinNumPts, AcquisitionStartTime)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureRecord(double(TimePerRecord), int32(MinNumPts), double(AcquisitionStartTime));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the most commonly used properties of the oscilloscope's acquisition subsystem: time per record, minimum record length, and the acquisition start time.</Description>
            </Method>
            <Method>
               <Name>Initiate</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Initiate(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition;
feature('COM_SafeArraySingleDim',1);
comobj.Initiate();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates a waveform acquisition.  The digitizer leaves the Idle state and waits for a trigger.  The digitizer acquires a waveform for each enabled channel.</Description>
            </Method>
            <Method>
               <Name>QueryMinWaveformMemory</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = QueryMinWaveformMemory(obj, DataWidth, NumRecords, OffsetWithinRecord, NumPointsPerRecord)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.QueryMinWaveformMemory(int32(DataWidth), int64(NumRecords), int64(OffsetWithinRecord), int64(NumPointsPerRecord));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function is used to determine the minimum amount of memory that is needed to fetch or read data from the digitizer with maximum performance.</Description>
            </Method>
            <Method>
               <Name>WaitForAcquisitionComplete</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WaitForAcquisitionComplete(obj, MaxTimeMilliseconds)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition;
feature('COM_SafeArraySingleDim',1);
comobj.WaitForAcquisitionComplete(int32(MaxTimeMilliseconds));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Waits until the configured acquisition is complete.  If no acquisition is currently running, this function returns immediately.   If the acquisition does not complete  within the time period the user specified with the MaxTimeMilliseconds parameter, the f</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>acquisition2</Name>
         <Description>IAgMD1Acquisition2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Acquisition21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Acquisition2Type</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1AcquisitionTypeNormal" Value="AgMD1AcquisitionTypeNormal"/>
                     <Enum Name="AgMD1AcquisitionTypeAverage" Value="AgMD1AcquisitionTypeAverage"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1AcquisitionTypeNormal</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>How the oscilloscope acquires data and fills the waveform record.  When set to TypeAverage, averaged waveforms must be read uisng the Measurement ReadWaveform methods.  Averaging is not supported (ignored) by all FetchWaveform methods.</Description>
            </Property>
            <Property>
               <Name>DitherEnabled</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.DitherEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.DitherEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>If true, enables dithering.  Requires model: M9202A</Description>
            </Property>
            <Property>
               <Name>DitherRange</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.DitherRange;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.DitherRange = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets amplitude of dithering signal.  Range: 0 to 31.  0 = dithering amplitude is 0 (i. e. no dithering).  31 = dithering amplitude is Full Scale/2 = 500 mV.  Requires model: M9202A</Description>
            </Property>
            <Property>
               <Name>DownconversionDataScalingEnabled</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.DownconversionDataScalingEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.DownconversionDataScalingEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Enable or disable the factor 2 scaling of downconversion data. This scaling factor can be used to return the true input signal power of single side band signal resulting from the data downconversion with tuning. The scaling is disabled by default.</Description>
            </Property>
            <Property>
               <Name>MaxFirstValidPointValue</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.MaxFirstValidPointValue;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.MaxFirstValidPointValue = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Returns the maximum value that the First Valid Point parameter of the readout functions may assume. This value is necessary to calculate the minimum size of the required data buffer to retrieved the entire acquisition.</Description>
            </Property>
            <Property>
               <Name>MaxSamplesPerChannel</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.MaxSamplesPerChannel;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the maximum number of samples per channel that can be captured.</Description>
            </Property>
            <Property>
               <Name>MinRecordSize</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.MinRecordSize;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.MinRecordSize = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Indicates the minimum waveform record size.  If the digitizer can support any arbitrary size record, then this attribute returns 1.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1AcquisitionModeNormal" Value="AgMD1AcquisitionModeNormal"/>
                     <Enum Name="AgMD1AcquisitionModeDownconverter" Value="AgMD1AcquisitionModeDownconverter"/>
                     <Enum Name="AgMD1AcquisitionModeCounter" Value="AgMD1AcquisitionModeCounter"/>
                     <Enum Name="AgMD1AcquisitionModeUserFDK" Value="AgMD1AcquisitionModeUserFDK"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1AcquisitionModeNormal</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The acquisition mode, Normal digitizer or digital Downconverter.   Downconverter mode requires model: M9202A</Description>
            </Property>
            <Property>
               <Name>NumAcquiredRecords</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.NumAcquiredRecords;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Gets the total number of records acquired since the acquistion was last initiated.  You may call this method while an acquisition is in progress.</Description>
            </Property>
            <Property>
               <Name>NumberOfAverages</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.NumberOfAverages;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.NumberOfAverages = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The number of waveforms the digitizer acquires and averages before returning to the idle state.  Averaged waveforms must be read uisng the Measurement.ReadWaveform methods.  Averaging is not supported (ignored) by all FetchWaveform methods.  Averaging is </Description>
            </Property>
            <Property>
               <Name>NumRecordsToAcquire</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.NumRecordsToAcquire;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.NumRecordsToAcquire = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the number of waveform records to acquire.  One waveform record is acquired for each recognized trigger.</Description>
            </Property>
            <Property>
               <Name>RecordSize</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.RecordSize;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.RecordSize = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the number of samples to acquire in each waveform record.</Description>
            </Property>
            <Property>
               <Name>SampleMode</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.SampleMode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.SampleMode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1SampleModeRealTime" Value="AgMD1SampleModeRealTime"/>
                     <Enum Name="AgMD1SampleModeEquivalentTime" Value="AgMD1SampleModeEquivalentTime"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1SampleModeRealTime</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>-- Always RealTime mode -- Specifies the sample mode used by the digitizer.</Description>
            </Property>
            <Property>
               <Name>SampleRate</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.SampleRate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.SampleRate = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the rate of the sample clock in samples per second.  This number represents the inverse of the interval between samples in the acquisition record.</Description>
            </Property>
            <Property>
               <Name>StartTime</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.StartTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.StartTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The length of time from the trigger event to the first point in the waveform record.  The units are seconds.  If positive, the first point in the waveform occurs after the trigger.  If negative, the first point in the waveform occurs before the trigger.</Description>
            </Property>
            <Property>
               <Name>TimeInterleavedChannelListAuto</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.TimeInterleavedChannelListAuto;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.TimeInterleavedChannelListAuto = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>-- Always false -- Specifies whether or not the instrument should automatically combine enabled channels to satisfy user-specified sample rates.  When set to True, the instrument will automatically combine channels to meet the sample rate requirements spe</Description>
            </Property>
            <Property>
               <Name>TimePerRecord</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	propertyValue = comobj.TimePerRecord;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition2;
	comobj.TimePerRecord = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The time in seconds that corresponds to the record length.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Abort</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Abort(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition2;
feature('COM_SafeArraySingleDim',1);
comobj.Abort();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Aborts an acquisition and returns the digitizer to the Idle state.</Description>
            </Method>
            <Method>
               <Name>ConfigureAcquisition</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureAcquisition(obj, NumRecordsToAcquire, RecordSize, SampleRate)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition2;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureAcquisition(int64(NumRecordsToAcquire), int64(RecordSize), double(SampleRate));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the most commonly configured attributes of the digitizer acquisition sub-system. These attributes are the samples per record, the number of records, and the sample rate.</Description>
            </Method>
            <Method>
               <Name>ConfigureRecord</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureRecord(obj, TimePerRecord, MinNumPts, AcquisitionStartTime)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition2;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureRecord(double(TimePerRecord), int32(MinNumPts), double(AcquisitionStartTime));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the most commonly used properties of the oscilloscope's acquisition subsystem: time per record, minimum record length, and the acquisition start time.</Description>
            </Method>
            <Method>
               <Name>Initiate</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Initiate(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition2;
feature('COM_SafeArraySingleDim',1);
comobj.Initiate();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates a waveform acquisition.  The digitizer leaves the Idle state and waits for a trigger.  The digitizer acquires a waveform for each enabled channel.</Description>
            </Method>
            <Method>
               <Name>QueryMinWaveformMemory</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = QueryMinWaveformMemory(obj, DataWidth, NumRecords, OffsetWithinRecord, NumPointsPerRecord)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition2;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.QueryMinWaveformMemory(int32(DataWidth), int64(NumRecords), int64(OffsetWithinRecord), int64(NumPointsPerRecord));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function is used to determine the minimum amount of memory that is needed to fetch or read data from the digitizer with maximum performance.</Description>
            </Method>
            <Method>
               <Name>WaitForAcquisitionComplete</Name>
               <Location>acquisition2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WaitForAcquisitionComplete(obj, MaxTimeMilliseconds)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition2;
feature('COM_SafeArraySingleDim',1);
comobj.WaitForAcquisitionComplete(int32(MaxTimeMilliseconds));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Waits until the configured acquisition is complete.  If no acquisition is currently running, this function returns immediately.   If the acquisition does not complete  within the time period the user specified with the MaxTimeMilliseconds parameter, the f</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>acquisitionstatus</Name>
         <Description>AgMD1 instrument-specific acquistion status interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="AcquisitionStatus1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>IsIdle</Name>
               <Location>acquisitionstatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj = comobj.Status;
	propertyValue = comobj.IsIdle;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1AcquisitionStatusResultTrue" Value="AgMD1AcquisitionStatusResultTrue"/>
                     <Enum Name="AgMD1AcquisitionStatusResultFalse" Value="AgMD1AcquisitionStatusResultFalse"/>
                     <Enum Name="AgMD1AcquisitionStatusResultUnknown" Value="AgMD1AcquisitionStatusResultUnknown"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1AcquisitionStatusResultTrue</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns whether the device is currently in the Idle state.  If the driver cannot query the digitizer to return its state, the driver returns the value Unknown.</Description>
            </Property>
            <Property>
               <Name>IsMeasuring</Name>
               <Location>acquisitionstatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj = comobj.Status;
	propertyValue = comobj.IsMeasuring;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1AcquisitionStatusResultTrue" Value="AgMD1AcquisitionStatusResultTrue"/>
                     <Enum Name="AgMD1AcquisitionStatusResultFalse" Value="AgMD1AcquisitionStatusResultFalse"/>
                     <Enum Name="AgMD1AcquisitionStatusResultUnknown" Value="AgMD1AcquisitionStatusResultUnknown"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1AcquisitionStatusResultTrue</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns whether the device is currently in the Measuring state.  If the driver cannot query the digitizer to return its state, the driver returns the value Unknown.</Description>
            </Property>
            <Property>
               <Name>IsWaitingForArm</Name>
               <Location>acquisitionstatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj = comobj.Status;
	propertyValue = comobj.IsWaitingForArm;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1AcquisitionStatusResultTrue" Value="AgMD1AcquisitionStatusResultTrue"/>
                     <Enum Name="AgMD1AcquisitionStatusResultFalse" Value="AgMD1AcquisitionStatusResultFalse"/>
                     <Enum Name="AgMD1AcquisitionStatusResultUnknown" Value="AgMD1AcquisitionStatusResultUnknown"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1AcquisitionStatusResultTrue</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns whether the device is currently in the Waiting For Arm state.  If true, acquisition has been initiated and is waiting for an arm signal from Arm.SendSoftwareArm method to enable triggering.  Requires model: M9202A</Description>
            </Property>
            <Property>
               <Name>IsWaitingForTrigger</Name>
               <Location>acquisitionstatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj = comobj.Status;
	propertyValue = comobj.IsWaitingForTrigger;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1AcquisitionStatusResultTrue" Value="AgMD1AcquisitionStatusResultTrue"/>
                     <Enum Name="AgMD1AcquisitionStatusResultFalse" Value="AgMD1AcquisitionStatusResultFalse"/>
                     <Enum Name="AgMD1AcquisitionStatusResultUnknown" Value="AgMD1AcquisitionStatusResultUnknown"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1AcquisitionStatusResultTrue</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns whether the device is currently in the Waiting For Trigger state.  If true, acquisition has been initiated, armed, and is waiting for a trigger.  If the driver cannot query the digitizer to return its state, the driver returns the value Unknown.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>arm</Name>
         <Description>IAgMD1Arm interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Arm1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>arm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>If true, auto arming is enabled. If false, after an acquisition has been initiated, SendSoftwareArm method must be called before any triggers will be accepted.  Requires model: M9202A</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>SendSoftwareArm</Name>
               <Location>arm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SendSoftwareArm(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Arm;
feature('COM_SafeArraySingleDim',1);
comobj.SendSoftwareArm();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>When Arm.Enabled is true and an acquisition has been initiated, arms the system to accept triggers.  Requires model: M9202A</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>calibration</Name>
         <Description>AgMD1 instrument-specific calibration interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Calibration1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>CalRequired</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = CalRequired(obj, Channel)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Calibration;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.CalRequired(int32(Channel));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Check if a self calibration is needed on the specified channel.</Description>
            </Method>
            <Method>
               <Name>Cancel</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Cancel(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Calibration;
feature('COM_SafeArraySingleDim',1);
comobj.Cancel();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Abort any running self-calibration and return.</Description>
            </Method>
            <Method>
               <Name>LoadCal</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function LoadCal(obj, FilePathName)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Calibration;
feature('COM_SafeArraySingleDim',1);
comobj.LoadCal(FilePathName);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Load calibration values and info from file.</Description>
            </Method>
            <Method>
               <Name>SaveCal</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SaveCal(obj, FilePathName)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Calibration;
feature('COM_SafeArraySingleDim',1);
comobj.SaveCal(FilePathName);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Save calibration values and info in a binary file.</Description>
            </Method>
            <Method>
               <Name>SelfCalibrate</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SelfCalibrate(obj, Type, Channel)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Calibration;
feature('COM_SafeArraySingleDim',1);
comobj.SelfCalibrate(Type, int32(Channel));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Executes all internal calibrations.  If the digitizer does not support calibration, this function silently succeeds.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>calibration2</Name>
         <Description>IAgMD1Calibration2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Calibration21" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>CalRequired</Name>
               <Location>calibration2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = CalRequired(obj, Channel)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Calibration2;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.CalRequired(int32(Channel));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Check if a self calibration is needed on the specified channel.</Description>
            </Method>
            <Method>
               <Name>Cancel</Name>
               <Location>calibration2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Cancel(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Calibration2;
feature('COM_SafeArraySingleDim',1);
comobj.Cancel();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Abort any running self-calibration and return.</Description>
            </Method>
            <Method>
               <Name>LoadCal</Name>
               <Location>calibration2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function LoadCal(obj, FilePathName)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Calibration2;
feature('COM_SafeArraySingleDim',1);
comobj.LoadCal(FilePathName);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Load calibration values and info from file.</Description>
            </Method>
            <Method>
               <Name>SaveCal</Name>
               <Location>calibration2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SaveCal(obj, FilePathName)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Calibration2;
feature('COM_SafeArraySingleDim',1);
comobj.SaveCal(FilePathName);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Save calibration values and info in a binary file.</Description>
            </Method>
            <Method>
               <Name>SelfCalibrate</Name>
               <Location>calibration2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SelfCalibrate(obj, Type, Channel)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Calibration2;
feature('COM_SafeArraySingleDim',1);
comobj.SelfCalibrate(Type, int32(Channel));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Executes all internal calibrations.  If the digitizer does not support calibration, this function silently succeeds.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>calibration2delaycontrol</Name>
         <Description>IAgMD1DelayControl interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Calibration2DelayControl1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Max</Name>
               <Location>calibration2delaycontrol</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration2;
	comobj = comobj.DelayControls;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Max;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Maximum value (DAC code) that can be set for the delay control.</Description>
            </Property>
            <Property>
               <Name>Min</Name>
               <Location>calibration2delaycontrol</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration2;
	comobj = comobj.DelayControls;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Min;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Minimum value (DAC code) that can be set for the delay control.</Description>
            </Property>
            <Property>
               <Name>Range</Name>
               <Location>calibration2delaycontrol</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration2;
	comobj = comobj.DelayControls;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Range;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration2;
	comobj = comobj.DelayControls;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Range = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1DelayControlRangeDefault" Value="AgMD1DelayControlRangeDefault"/>
                     <Enum Name="AgMD1DelayControlRangeExtended" Value="AgMD1DelayControlRangeExtended"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1DelayControlRangeDefault</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Selects the range for the delay control. Useful only for delay controls with multiple ranges.</Description>
            </Property>
            <Property>
               <Name>Value</Name>
               <Location>calibration2delaycontrol</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration2;
	comobj = comobj.DelayControls;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Value;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration2;
	comobj = comobj.DelayControls;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Value = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The value (DAC code) set for the delay control.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>calibration2delaycontrols</Name>
         <Description>IAgMD1DelayControls interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Calibration2DelayControls1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>calibration2delaycontrols</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration2;
	comobj = comobj.DelayControls;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the number of delay controls.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>calibration2delaycontrols</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration2;
	comobj = comobj.DelayControls;
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration2;
	comobj = comobj.DelayControls;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the delay controls are set manually. If set to true, all delay controls must be set manually. When false, the delay controls are set by the self-calibration.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Item</Name>
               <Location>calibration2delaycontrols</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Calibration2;
comobj = comobj.DelayControls;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgMD1DelayControl interface.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>calibration2delaycontrols</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Calibration2;
comobj = comobj.DelayControls;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Returns the delay control name for a given index.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>channel</Name>
         <Description>AgMD1 instrument-specific channel interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channel1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ConnectorName</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ConnectorName;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The connector name as it appears on the instrument's front panel.</Description>
            </Property>
            <Property>
               <Name>Coupling</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Coupling;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Coupling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1VerticalCouplingAC" Value="AgMD1VerticalCouplingAC"/>
                     <Enum Name="AgMD1VerticalCouplingDC" Value="AgMD1VerticalCouplingDC"/>
                     <Enum Name="AgMD1VerticalCouplingGnd" Value="AgMD1VerticalCouplingGnd"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1VerticalCouplingAC</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies how the digitizer couples the input signal for the channel.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the digitizer acquires a waveform for the channel.</Description>
            </Property>
            <Property>
               <Name>InputConnectorSelection</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.InputConnectorSelection;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.InputConnectorSelection = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Some digitizers include multiple connectors for each digitizer input channel.  These connectors are often simply a matter of convenience for system cabling ? multiple signals can be routed to the various connectors, the the desired signal can be sent into</Description>
            </Property>
            <Property>
               <Name>InputFrequencyMax</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.InputFrequencyMax;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.InputFrequencyMax = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The maximum input frequency of this channel.  It the frequency at which the input circuitry attenuates the input signal by 3 dB.  The units are hertz.  Returns 0.0 when no filter is set (i.e. max bandwidth).</Description>
            </Property>
            <Property>
               <Name>InputImpedance</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.InputImpedance;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.InputImpedance = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The input impedance of this channel.  The units are Ohms.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The location of the center of the range that you specify with the Range attribute.  The units are Volts, with respect to ground.  For example, to acquire a sine wave spanning 0.0 to 10.0 volts, set Offset to 5.0 volts.</Description>
            </Property>
            <Property>
               <Name>ProbeAttenuation</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ProbeAttenuation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.ProbeAttenuation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The scaling factor by which the probe attenuates the input signal.  For example, with a 10:1 probe, the value is 10.0.</Description>
            </Property>
            <Property>
               <Name>ProbeSense</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ProbeSense;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The probe attenuation value the oscilloscope automatically senses.  If the automatic probe sense is disabled, its value is the manual probe attenuation setting.</Description>
            </Property>
            <Property>
               <Name>Range</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Range;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Range = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The absolute value of the input range the digitizer can acquire for the channel.  The units are Volts.  For example, to acquire a sine wave spanning -5.0 to 5.0 volts, set Range to 10.0 volts.</Description>
            </Property>
            <Property>
               <Name>Temperature</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Temperature;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Indicates the temperature of the channel.  The units are governed by the Temperature Units attribute.</Description>
            </Property>
            <Property>
               <Name>TimeInterleavedChannelList</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.TimeInterleavedChannelList;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.TimeInterleavedChannelList = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This attribute is used to combine this channel with one or more other channels to achieve higher effective sampling rates and/or greater memory depth.  The string provided here specifies which channels should operate in combined mode with the current chan</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Range, Offset, Coupling, Enabled)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Range), double(Offset), Coupling, logical(Enabled));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the most commonly configured attributes of the digitizer channel sub-system. These attributes are the range, offset, coupling, and whether the channel is enabled.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>channel2</Name>
         <Description>IAgMD1Channel2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channel21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ConnectorName</Name>
               <Location>channel2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ConnectorName;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The connector name as it appears on the instrument's front panel.</Description>
            </Property>
            <Property>
               <Name>Coupling</Name>
               <Location>channel2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Coupling;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Coupling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1VerticalCouplingAC" Value="AgMD1VerticalCouplingAC"/>
                     <Enum Name="AgMD1VerticalCouplingDC" Value="AgMD1VerticalCouplingDC"/>
                     <Enum Name="AgMD1VerticalCouplingGnd" Value="AgMD1VerticalCouplingGnd"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1VerticalCouplingAC</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies how the digitizer couples the input signal for the channel.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>channel2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the digitizer acquires a waveform for the channel.</Description>
            </Property>
            <Property>
               <Name>InputConnectorSelection</Name>
               <Location>channel2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.InputConnectorSelection;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.InputConnectorSelection = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Some digitizers include multiple connectors for each digitizer input channel.  These connectors are often simply a matter of convenience for system cabling ? multiple signals can be routed to the various connectors, the the desired signal can be sent into</Description>
            </Property>
            <Property>
               <Name>InputFrequencyMax</Name>
               <Location>channel2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.InputFrequencyMax;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.InputFrequencyMax = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The maximum input frequency of this channel.  It the frequency at which the input circuitry attenuates the input signal by 3 dB.  The units are hertz.  Returns 0.0 when no filter is set (i.e. max bandwidth).</Description>
            </Property>
            <Property>
               <Name>InputImpedance</Name>
               <Location>channel2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.InputImpedance;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.InputImpedance = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The input impedance of this channel.  The units are Ohms.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>channel2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The location of the center of the range that you specify with the Range attribute.  The units are Volts, with respect to ground.  For example, to acquire a sine wave spanning 0.0 to 10.0 volts, set Offset to 5.0 volts.</Description>
            </Property>
            <Property>
               <Name>ProbeAttenuation</Name>
               <Location>channel2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ProbeAttenuation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.ProbeAttenuation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The scaling factor by which the probe attenuates the input signal.  For example, with a 10:1 probe, the value is 10.0.</Description>
            </Property>
            <Property>
               <Name>ProbeSense</Name>
               <Location>channel2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ProbeSense;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The probe attenuation value the oscilloscope automatically senses.  If the automatic probe sense is disabled, its value is the manual probe attenuation setting.</Description>
            </Property>
            <Property>
               <Name>Range</Name>
               <Location>channel2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Range;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Range = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The absolute value of the input range the digitizer can acquire for the channel.  The units are Volts.  For example, to acquire a sine wave spanning -5.0 to 5.0 volts, set Range to 10.0 volts.</Description>
            </Property>
            <Property>
               <Name>Temperature</Name>
               <Location>channel2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Temperature;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Indicates the temperature of the channel.  The units are governed by the Temperature Units attribute.</Description>
            </Property>
            <Property>
               <Name>TimeInterleavedChannelList</Name>
               <Location>channel2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.TimeInterleavedChannelList;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.TimeInterleavedChannelList = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This attribute is used to combine this channel with one or more other channels to achieve higher effective sampling rates and/or greater memory depth.  The string provided here specifies which channels should operate in combined mode with the current chan</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>channel2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Range, Offset, Coupling, Enabled)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Range), double(Offset), Coupling, logical(Enabled));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the most commonly configured attributes of the digitizer channel sub-system. These attributes are the range, offset, coupling, and whether the channel is enabled.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>channel2counter</Name>
         <Description>IAgMD1Channel2Counter interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channel2Counter1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ApertureTime</Name>
               <Location>channel2counter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Counter;
	propertyValue = comobj.ApertureTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Counter;
	comobj.ApertureTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The minimum measurement time for Frequency and Period modes.  The duration to count input pulses for TotalizeGate mode.  The Counter.Read method will wait this time before returning measurement data. Units are seconds.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>channel2counter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Counter;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Counter;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1CounterModeFrequency" Value="AgMD1CounterModeFrequency"/>
                     <Enum Name="AgMD1CounterModePeriod" Value="AgMD1CounterModePeriod"/>
                     <Enum Name="AgMD1CounterModeTotalizeTime" Value="AgMD1CounterModeTotalizeTime"/>
                     <Enum Name="AgMD1CounterModeTotalizeGate" Value="AgMD1CounterModeTotalizeGate"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1CounterModeFrequency</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The mode for counter measurements, Frequency, Period, TotalizeTime, or TotalizeGate.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Read</Name>
               <Location>channel2counter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Read(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Counter;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.Read();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Counter measurement results for the current mode.  Counter must be enabled by setting Acquisition.Mode = AgMD1AcquisitionModeCounter.  The Read method will wait the current ApertureTime before returning measurement data.  Units are Hz for Frequency, Secon</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>channel2digitaldownconversion</Name>
         <Description>IAgMD1ChannelDigitalDownconversion interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channel2DigitalDownconversion1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>DataBandwidth</Name>
               <Location>channel2digitaldownconversion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	propertyValue = comobj.DataBandwidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	comobj.DataBandwidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The output bandwidth in Hz for down-converted data.  Range: 250e6, 200e6, 100e6, 50e6 etc following progression f(n+1) = f(n)/ 2, down to 2GHz/(2^21) = about 1 kHz. Requires Model: M9202A</Description>
            </Property>
            <Property>
               <Name>DoubleDataRateEnabled</Name>
               <Location>channel2digitaldownconversion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	propertyValue = comobj.DoubleDataRateEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	comobj.DoubleDataRateEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>False = simple data rate (Samples / second = 1.25*bandwidth), True = double data rate (Samples / second = 2.5*bandwidth)    Note: only applies for DataBandwidth values of 1.0e8 and below. Requires Model: M9202A</Description>
            </Property>
            <Property>
               <Name>FlipBandEnabled</Name>
               <Location>channel2digitaldownconversion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	propertyValue = comobj.FlipBandEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	comobj.FlipBandEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>True = First frequency shift is by -500MHz.  False = First frequency shift is by +500MHz. Requires Model: M9202A</Description>
            </Property>
            <Property>
               <Name>FrequencyShift</Name>
               <Location>channel2digitaldownconversion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	propertyValue = comobj.FrequencyShift;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	comobj.FrequencyShift = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Decoded to set up the frequency shift blocks of the down converter. The value of this attribute corresponds to the data frequency shift; trigger frequency shift is the nearest value available with the given TriggerBandwidth. I. e. the trigger frequency sh</Description>
            </Property>
            <Property>
               <Name>TriggerBandwidth</Name>
               <Location>channel2digitaldownconversion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	propertyValue = comobj.TriggerBandwidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	comobj.TriggerBandwidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The output bandwidth in Hz for down-converted trigger. Requires Model: M9202A</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>channel2digitaldownconversion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, DataBandwidth, TriggerBandwidth)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.DigitalDownconversion;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(DataBandwidth), double(TriggerBandwidth));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the DigitalDownconverson DataBandwidth and TriggerBandwidth. Requires Model: M9202A</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>channel2filter</Name>
         <Description>AgMD1 instrument-specific channel filter interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channel2Filter1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Bypass</Name>
               <Location>channel2filter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	propertyValue = comobj.Bypass;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	comobj.Bypass = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether or not to bypass the input filter.</Description>
            </Property>
            <Property>
               <Name>MaxFrequency</Name>
               <Location>channel2filter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	propertyValue = comobj.MaxFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	comobj.MaxFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the maximum input filter frequency.  Specifying a value of zero means that the device should be set to the full bandwidth that the filter can deliver without being bypassed.  The units are Hertz.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>channel2measurement</Name>
         <Description>AgMD1 instrument-specific measurement interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channel2Measurement1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>WaveformType</Name>
               <Location>channel2measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Measurement;
	propertyValue = comobj.WaveformType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Measurement;
	comobj.WaveformType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1MeasurementWaveformTypeUnknown" Value="AgMD1MeasurementWaveformTypeUnknown"/>
                     <Enum Name="AgMD1MeasurementWaveformTypeSine" Value="AgMD1MeasurementWaveformTypeSine"/>
                     <Enum Name="AgMD1MeasurementWaveformTypeSquare" Value="AgMD1MeasurementWaveformTypeSquare"/>
                     <Enum Name="AgMD1MeasurementWaveformTypeRamp" Value="AgMD1MeasurementWaveformTypeRamp"/>
                     <Enum Name="AgMD1MeasurementWaveformTypePulsedDC" Value="AgMD1MeasurementWaveformTypePulsedDC"/>
                     <Enum Name="AgMD1MeasurementWaveformTypeStep" Value="AgMD1MeasurementWaveformTypeStep"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1MeasurementWaveformTypeUnknown</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The waveform type used to calculate the various measurement functions by the FetchWaveformMeasurement and ReadWaveformMeasurement methods.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>FetchWaveformInt16</Name>
               <Location>channel2measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = FetchWaveformInt16(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.FetchWaveformInt16(int16([0;0]), 0, 0, 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function returns the waveform the digitizer acquired for the specified channel. The waveform is from a previously initiated acquisition.  Returned waveform data units are raw ADC values which may be converted to volts by the formula: V = ScaleFactor </Description>
            </Method>
            <Method>
               <Name>FetchWaveformInt32</Name>
               <Location>channel2measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = FetchWaveformInt32(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.FetchWaveformInt32(int32([0;0]), 0, 0, 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform for this channel. The acquisition must be made prior to calling this method.  Call this method separately for each channel.  Returned waveform data units are raw ADC values which may be converted to volts by the form</Description>
            </Method>
            <Method>
               <Name>FetchWaveformInt8</Name>
               <Location>channel2measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = FetchWaveformInt8(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.FetchWaveformInt8(uint8([0;0]), 0, 0, 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform for this channel. The acquisition must be made prior to calling this method.  Call this method separately for each channel.  Returned waveform data units are raw ADC values.  Unsigned byte data is actually signed (+-</Description>
            </Method>
            <Method>
               <Name>FetchWaveformMeasurement</Name>
               <Location>channel2measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = FetchWaveformMeasurement(obj, MeasFunction, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[Measurement] = comobj.FetchWaveformMeasurement(MeasFunction, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform measurement for this channel.  The acquisition must be made prior to calling this method.  Call this method separately for each measurement.</Description>
            </Method>
            <Method>
               <Name>FetchWaveformReal64</Name>
               <Location>channel2measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement] = FetchWaveformReal64(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement] = comobj.FetchWaveformReal64([0;0], 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform for this channel. The acquisition must be made prior to calling this method.  Call this method separately for each channel.  Returned waveform data units are Volts.</Description>
            </Method>
            <Method>
               <Name>ReadWaveformInt16</Name>
               <Location>channel2measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = ReadWaveformInt16(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.ReadWaveformInt16(int32(MaxTimeMilliseconds), int16([0;0]), 0, 0, 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTimeMilliseconds) for the acquisition to complete, and returns the waveform for this channel.  Call FetchWaveform to obtain the waveforms for other channels.  Returned waveform data units a</Description>
            </Method>
            <Method>
               <Name>ReadWaveformInt32</Name>
               <Location>channel2measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = ReadWaveformInt32(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.ReadWaveformInt32(int32(MaxTimeMilliseconds), int32([0;0]), 0, 0, 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTimeMilliseconds) for the acquisition to complete, and returns the waveform for this channel.  Call FetchWaveform to obtain the waveforms for other channels.  Returned waveform data units a</Description>
            </Method>
            <Method>
               <Name>ReadWaveformInt8</Name>
               <Location>channel2measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = ReadWaveformInt8(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.ReadWaveformInt8(int32(MaxTimeMilliseconds), uint8([0;0]), 0, 0, 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTimeMilliseconds) for the acquisition to complete, and returns the waveform for this channel.  Call FetchWaveform to obtain the waveforms for other channels.  Returned waveform data units a</Description>
            </Method>
            <Method>
               <Name>ReadWaveformMeasurement</Name>
               <Location>channel2measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = ReadWaveformMeasurement(obj, MeasFunction, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[Measurement] = comobj.ReadWaveformMeasurement(MeasFunction, int32(MaxTimeMilliseconds), 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the measurement for this channel.  Call FetchWaveformMeasurement to obtain other measurements for this or other channels.</Description>
            </Method>
            <Method>
               <Name>ReadWaveformReal64</Name>
               <Location>channel2measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement] = ReadWaveformReal64(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement] = comobj.ReadWaveformReal64(int32(MaxTimeMilliseconds), [0;0], 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTimeMilliseconds) for the acquisition to complete, and returns the waveform for this channel.  Call FetchWaveform to obtain the waveforms for other channels.  Returned waveform data units a</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>channel2multirecordmeasurement</Name>
         <Description>AgMD1 instrument-specific multi-record measurement interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channel2MultiRecordMeasurement1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>FetchMultiRecordWaveformInt16</Name>
               <Location>channel2multirecordmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = FetchMultiRecordWaveformInt16(obj, FirstRecord, NumRecords, OffsetWithinRecord, NumPointsPerRecord, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.MultiRecordMeasurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.FetchMultiRecordWaveformInt16(int64(FirstRecord), int64(NumRecords), int64(OffsetWithinRecord), int64(NumPointsPerRecord), int16([0;0]), 0, int64([0;0]), int64([0;0]), [0;0], [0;0], [0;0], 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function returns the (multi-record) waveform the digitizer acquired for the specified channel. The waveform is from a previously initiated acquisition.  Returned waveform data units are raw ADC values which may be converted to volts by the formula: V</Description>
            </Method>
            <Method>
               <Name>FetchMultiRecordWaveformInt32</Name>
               <Location>channel2multirecordmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = FetchMultiRecordWaveformInt32(obj, FirstRecord, NumRecords, OffsetWithinRecord, NumPointsPerRecord, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.MultiRecordMeasurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.FetchMultiRecordWaveformInt32(int64(FirstRecord), int64(NumRecords), int64(OffsetWithinRecord), int64(NumPointsPerRecord), int32([0;0]), 0, int64([0;0]), int64([0;0]), [0;0], [0;0], [0;0], 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function returns the (multi-record) waveform the digitizer acquired for the specified channel. The waveform is from a previously initiated acquisition.  Returned waveform data units are raw ADC values which may be converted to volts by the formula: V</Description>
            </Method>
            <Method>
               <Name>FetchMultiRecordWaveformInt8</Name>
               <Location>channel2multirecordmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = FetchMultiRecordWaveformInt8(obj, FirstRecord, NumRecords, OffsetWithinRecord, NumPointsPerRecord, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.MultiRecordMeasurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.FetchMultiRecordWaveformInt8(int64(FirstRecord), int64(NumRecords), int64(OffsetWithinRecord), int64(NumPointsPerRecord), uint8([0;0]), 0, int64([0;0]), int64([0;0]), [0;0], [0;0], [0;0], 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function returns the (multi-record) waveform the digitizer acquired for the specified channel. The waveform is from a previously initiated acquisition.  Returned waveform data units are raw ADC values.  Unsigned byte data is actually signed (+-128) a</Description>
            </Method>
            <Method>
               <Name>FetchMultiRecordWaveformReal64</Name>
               <Location>channel2multirecordmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement] = FetchMultiRecordWaveformReal64(obj, FirstRecord, NumRecords, OffsetWithinRecord, NumPointsPerRecord, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.MultiRecordMeasurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement] = comobj.FetchMultiRecordWaveformReal64(int64(FirstRecord), int64(NumRecords), int64(OffsetWithinRecord), int64(NumPointsPerRecord), [0;0], 0, int64([0;0]), int64([0;0]), [0;0], [0;0], [0;0], 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function returns the (multi-record) waveform the digitizer acquired for the specified channel. The waveform is from a previously initiated acquisition.  Returned waveform data units are Volts.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>channel3</Name>
         <Description>IAgMD1Channel3 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channel31" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ConnectorName</Name>
               <Location>channel3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ConnectorName;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The connector name as it appears on the instrument's front panel.</Description>
            </Property>
            <Property>
               <Name>Coupling</Name>
               <Location>channel3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Coupling;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Coupling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1VerticalCouplingAC" Value="AgMD1VerticalCouplingAC"/>
                     <Enum Name="AgMD1VerticalCouplingDC" Value="AgMD1VerticalCouplingDC"/>
                     <Enum Name="AgMD1VerticalCouplingGnd" Value="AgMD1VerticalCouplingGnd"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1VerticalCouplingAC</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies how the digitizer couples the input signal for the channel.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>channel3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the digitizer acquires a waveform for the channel.</Description>
            </Property>
            <Property>
               <Name>InputConnectorSelection</Name>
               <Location>channel3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.InputConnectorSelection;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.InputConnectorSelection = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Some digitizers include multiple connectors for each digitizer input channel.  These connectors are often simply a matter of convenience for system cabling ? multiple signals can be routed to the various connectors, the the desired signal can be sent into</Description>
            </Property>
            <Property>
               <Name>InputFrequencyMax</Name>
               <Location>channel3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.InputFrequencyMax;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.InputFrequencyMax = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The maximum input frequency of this channel.  It the frequency at which the input circuitry attenuates the input signal by 3 dB.  The units are hertz.  Returns 0.0 when no filter is set (i.e. max bandwidth).</Description>
            </Property>
            <Property>
               <Name>InputImpedance</Name>
               <Location>channel3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.InputImpedance;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.InputImpedance = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The input impedance of this channel.  The units are Ohms.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>channel3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The location of the center of the range that you specify with the Range attribute.  The units are Volts, with respect to ground.  For example, to acquire a sine wave spanning 0.0 to 10.0 volts, set Offset to 5.0 volts.</Description>
            </Property>
            <Property>
               <Name>ProbeAttenuation</Name>
               <Location>channel3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ProbeAttenuation;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.ProbeAttenuation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The scaling factor by which the probe attenuates the input signal.  For example, with a 10:1 probe, the value is 10.0.</Description>
            </Property>
            <Property>
               <Name>ProbeSense</Name>
               <Location>channel3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ProbeSense;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The probe attenuation value the oscilloscope automatically senses.  If the automatic probe sense is disabled, its value is the manual probe attenuation setting.</Description>
            </Property>
            <Property>
               <Name>Range</Name>
               <Location>channel3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Range;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Range = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The absolute value of the input range the digitizer can acquire for the channel.  The units are Volts.  For example, to acquire a sine wave spanning -5.0 to 5.0 volts, set Range to 10.0 volts.</Description>
            </Property>
            <Property>
               <Name>Temperature</Name>
               <Location>channel3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Temperature;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Indicates the temperature of the channel.  The units are governed by the Temperature Units attribute.</Description>
            </Property>
            <Property>
               <Name>TimeInterleavedChannelList</Name>
               <Location>channel3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.TimeInterleavedChannelList;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.TimeInterleavedChannelList = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This attribute is used to combine this channel with one or more other channels to achieve higher effective sampling rates and/or greater memory depth.  The string provided here specifies which channels should operate in combined mode with the current chan</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>channel3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Range, Offset, Coupling, Enabled)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels3;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Range), double(Offset), Coupling, logical(Enabled));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the most commonly configured attributes of the digitizer channel sub-system. These attributes are the range, offset, coupling, and whether the channel is enabled.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>channel3counter</Name>
         <Description>IAgMD1Channel2Counter interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channel3Counter1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ApertureTime</Name>
               <Location>channel3counter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Counter;
	propertyValue = comobj.ApertureTime;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Counter;
	comobj.ApertureTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The minimum measurement time for Frequency and Period modes.  The duration to count input pulses for TotalizeGate mode.  The Counter.Read method will wait this time before returning measurement data. Units are seconds.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>channel3counter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Counter;
	propertyValue = comobj.Mode;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Counter;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1CounterModeFrequency" Value="AgMD1CounterModeFrequency"/>
                     <Enum Name="AgMD1CounterModePeriod" Value="AgMD1CounterModePeriod"/>
                     <Enum Name="AgMD1CounterModeTotalizeTime" Value="AgMD1CounterModeTotalizeTime"/>
                     <Enum Name="AgMD1CounterModeTotalizeGate" Value="AgMD1CounterModeTotalizeGate"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1CounterModeFrequency</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The mode for counter measurements, Frequency, Period, TotalizeTime, or TotalizeGate.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Read</Name>
               <Location>channel3counter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Read(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels3;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Counter;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.Read();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Counter measurement results for the current mode.  Counter must be enabled by setting Acquisition.Mode = AgMD1AcquisitionModeCounter.  The Read method will wait the current ApertureTime before returning measurement data.  Units are Hz for Frequency, Secon</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>channel3digitaldownconversion</Name>
         <Description>IAgMD1ChannelDigitalDownconversion interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channel3DigitalDownconversion1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>DataBandwidth</Name>
               <Location>channel3digitaldownconversion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	propertyValue = comobj.DataBandwidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	comobj.DataBandwidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The output bandwidth in Hz for down-converted data.  Range: 250e6, 200e6, 100e6, 50e6 etc following progression f(n+1) = f(n)/ 2, down to 2GHz/(2^21) = about 1 kHz. Requires Model: M9202A</Description>
            </Property>
            <Property>
               <Name>DoubleDataRateEnabled</Name>
               <Location>channel3digitaldownconversion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	propertyValue = comobj.DoubleDataRateEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	comobj.DoubleDataRateEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>False = simple data rate (Samples / second = 1.25*bandwidth), True = double data rate (Samples / second = 2.5*bandwidth)    Note: only applies for DataBandwidth values of 1.0e8 and below. Requires Model: M9202A</Description>
            </Property>
            <Property>
               <Name>FlipBandEnabled</Name>
               <Location>channel3digitaldownconversion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	propertyValue = comobj.FlipBandEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	comobj.FlipBandEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>True = First frequency shift is by -500MHz.  False = First frequency shift is by +500MHz. Requires Model: M9202A</Description>
            </Property>
            <Property>
               <Name>FrequencyShift</Name>
               <Location>channel3digitaldownconversion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	propertyValue = comobj.FrequencyShift;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	comobj.FrequencyShift = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Decoded to set up the frequency shift blocks of the down converter. The value of this attribute corresponds to the data frequency shift; trigger frequency shift is the nearest value available with the given TriggerBandwidth. I. e. the trigger frequency sh</Description>
            </Property>
            <Property>
               <Name>TriggerBandwidth</Name>
               <Location>channel3digitaldownconversion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	propertyValue = comobj.TriggerBandwidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	comobj.TriggerBandwidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The output bandwidth in Hz for down-converted trigger. Requires Model: M9202A</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>channel3digitaldownconversion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, DataBandwidth, TriggerBandwidth)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels3;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.DigitalDownconversion;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(DataBandwidth), double(TriggerBandwidth));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the DigitalDownconverson DataBandwidth and TriggerBandwidth. Requires Model: M9202A</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>channel3downconversion</Name>
         <Description>IVI Digitizer class-compliant downconversion interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channel3Downconversion1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>CenterFrequency</Name>
               <Location>channel3downconversion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Downconversion;
	propertyValue = comobj.CenterFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Downconversion;
	comobj.CenterFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the center frequency, in Hz, from which the digitizer should downconvert.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>channel3downconversion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Downconversion;
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Downconversion;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables downconversion.  When enabled, the Read and Fetch functions return data according to the setting of the Fetch IQ Interleaved Data attribute.</Description>
            </Property>
            <Property>
               <Name>IQInterleaved</Name>
               <Location>channel3downconversion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Downconversion;
	propertyValue = comobj.IQInterleaved;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Downconversion;
	comobj.IQInterleaved = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Controls how the Read and Fetch functions return data when downconversion is enabled.  When this attribute is True and downconversion is enabled, the data returned from the Read and Fetch functions is interleaved I-Q data points.  When this attribute is F</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>channel3downconversion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Enabled, CenterFrequency)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels3;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Downconversion;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(logical(Enabled), double(CenterFrequency));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures how the digitizer performs downconversion.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>channel3filter</Name>
         <Description>AgMD1 instrument-specific channel filter interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channel3Filter1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Bypass</Name>
               <Location>channel3filter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	propertyValue = comobj.Bypass;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	comobj.Bypass = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether or not to bypass the input filter.</Description>
            </Property>
            <Property>
               <Name>MaxFrequency</Name>
               <Location>channel3filter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	propertyValue = comobj.MaxFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	comobj.MaxFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the maximum input filter frequency.  Specifying a value of zero means that the device should be set to the full bandwidth that the filter can deliver without being bypassed.  The units are Hertz.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>channel3measurement</Name>
         <Description>AgMD1 instrument-specific measurement interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channel3Measurement1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>WaveformType</Name>
               <Location>channel3measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Measurement;
	propertyValue = comobj.WaveformType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Measurement;
	comobj.WaveformType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1MeasurementWaveformTypeUnknown" Value="AgMD1MeasurementWaveformTypeUnknown"/>
                     <Enum Name="AgMD1MeasurementWaveformTypeSine" Value="AgMD1MeasurementWaveformTypeSine"/>
                     <Enum Name="AgMD1MeasurementWaveformTypeSquare" Value="AgMD1MeasurementWaveformTypeSquare"/>
                     <Enum Name="AgMD1MeasurementWaveformTypeRamp" Value="AgMD1MeasurementWaveformTypeRamp"/>
                     <Enum Name="AgMD1MeasurementWaveformTypePulsedDC" Value="AgMD1MeasurementWaveformTypePulsedDC"/>
                     <Enum Name="AgMD1MeasurementWaveformTypeStep" Value="AgMD1MeasurementWaveformTypeStep"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1MeasurementWaveformTypeUnknown</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The waveform type used to calculate the various measurement functions by the FetchWaveformMeasurement and ReadWaveformMeasurement methods.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>FetchWaveformInt16</Name>
               <Location>channel3measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = FetchWaveformInt16(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels3;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.FetchWaveformInt16(int16([0;0]), 0, 0, 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function returns the waveform the digitizer acquired for the specified channel. The waveform is from a previously initiated acquisition.  Returned waveform data units are raw ADC values which may be converted to volts by the formula: V = ScaleFactor </Description>
            </Method>
            <Method>
               <Name>FetchWaveformInt32</Name>
               <Location>channel3measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = FetchWaveformInt32(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels3;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.FetchWaveformInt32(int32([0;0]), 0, 0, 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform for this channel. The acquisition must be made prior to calling this method.  Call this method separately for each channel.  Returned waveform data units are raw ADC values which may be converted to volts by the form</Description>
            </Method>
            <Method>
               <Name>FetchWaveformInt8</Name>
               <Location>channel3measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = FetchWaveformInt8(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels3;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.FetchWaveformInt8(uint8([0;0]), 0, 0, 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform for this channel. The acquisition must be made prior to calling this method.  Call this method separately for each channel.  Returned waveform data units are raw ADC values.  Unsigned byte data is actually signed (+-</Description>
            </Method>
            <Method>
               <Name>FetchWaveformMeasurement</Name>
               <Location>channel3measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = FetchWaveformMeasurement(obj, MeasFunction, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels3;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[Measurement] = comobj.FetchWaveformMeasurement(MeasFunction, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform measurement for this channel.  The acquisition must be made prior to calling this method.  Call this method separately for each measurement.</Description>
            </Method>
            <Method>
               <Name>FetchWaveformReal64</Name>
               <Location>channel3measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement] = FetchWaveformReal64(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels3;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement] = comobj.FetchWaveformReal64([0;0], 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform for this channel. The acquisition must be made prior to calling this method.  Call this method separately for each channel.  Returned waveform data units are Volts.</Description>
            </Method>
            <Method>
               <Name>ReadWaveformInt16</Name>
               <Location>channel3measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = ReadWaveformInt16(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels3;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.ReadWaveformInt16(int32(MaxTimeMilliseconds), int16([0;0]), 0, 0, 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTimeMilliseconds) for the acquisition to complete, and returns the waveform for this channel.  Call FetchWaveform to obtain the waveforms for other channels.  Returned waveform data units a</Description>
            </Method>
            <Method>
               <Name>ReadWaveformInt32</Name>
               <Location>channel3measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = ReadWaveformInt32(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels3;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.ReadWaveformInt32(int32(MaxTimeMilliseconds), int32([0;0]), 0, 0, 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTimeMilliseconds) for the acquisition to complete, and returns the waveform for this channel.  Call FetchWaveform to obtain the waveforms for other channels.  Returned waveform data units a</Description>
            </Method>
            <Method>
               <Name>ReadWaveformInt8</Name>
               <Location>channel3measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = ReadWaveformInt8(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels3;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.ReadWaveformInt8(int32(MaxTimeMilliseconds), uint8([0;0]), 0, 0, 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTimeMilliseconds) for the acquisition to complete, and returns the waveform for this channel.  Call FetchWaveform to obtain the waveforms for other channels.  Returned waveform data units a</Description>
            </Method>
            <Method>
               <Name>ReadWaveformMeasurement</Name>
               <Location>channel3measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = ReadWaveformMeasurement(obj, MeasFunction, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels3;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[Measurement] = comobj.ReadWaveformMeasurement(MeasFunction, int32(MaxTimeMilliseconds), 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the measurement for this channel.  Call FetchWaveformMeasurement to obtain other measurements for this or other channels.</Description>
            </Method>
            <Method>
               <Name>ReadWaveformReal64</Name>
               <Location>channel3measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement] = ReadWaveformReal64(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels3;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement] = comobj.ReadWaveformReal64(int32(MaxTimeMilliseconds), [0;0], 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTimeMilliseconds) for the acquisition to complete, and returns the waveform for this channel.  Call FetchWaveform to obtain the waveforms for other channels.  Returned waveform data units a</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>channel3multirecordmeasurement</Name>
         <Description>AgMD1 instrument-specific multi-record measurement interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channel3MultiRecordMeasurement1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>FetchMultiRecordWaveformInt16</Name>
               <Location>channel3multirecordmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = FetchMultiRecordWaveformInt16(obj, FirstRecord, NumRecords, OffsetWithinRecord, NumPointsPerRecord, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels3;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.MultiRecordMeasurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.FetchMultiRecordWaveformInt16(int64(FirstRecord), int64(NumRecords), int64(OffsetWithinRecord), int64(NumPointsPerRecord), int16([0;0]), 0, int64([0;0]), int64([0;0]), [0;0], [0;0], [0;0], 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function returns the (multi-record) waveform the digitizer acquired for the specified channel. The waveform is from a previously initiated acquisition.  Returned waveform data units are raw ADC values which may be converted to volts by the formula: V</Description>
            </Method>
            <Method>
               <Name>FetchMultiRecordWaveformInt32</Name>
               <Location>channel3multirecordmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = FetchMultiRecordWaveformInt32(obj, FirstRecord, NumRecords, OffsetWithinRecord, NumPointsPerRecord, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels3;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.MultiRecordMeasurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.FetchMultiRecordWaveformInt32(int64(FirstRecord), int64(NumRecords), int64(OffsetWithinRecord), int64(NumPointsPerRecord), int32([0;0]), 0, int64([0;0]), int64([0;0]), [0;0], [0;0], [0;0], 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function returns the (multi-record) waveform the digitizer acquired for the specified channel. The waveform is from a previously initiated acquisition.  Returned waveform data units are raw ADC values which may be converted to volts by the formula: V</Description>
            </Method>
            <Method>
               <Name>FetchMultiRecordWaveformInt8</Name>
               <Location>channel3multirecordmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = FetchMultiRecordWaveformInt8(obj, FirstRecord, NumRecords, OffsetWithinRecord, NumPointsPerRecord, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels3;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.MultiRecordMeasurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.FetchMultiRecordWaveformInt8(int64(FirstRecord), int64(NumRecords), int64(OffsetWithinRecord), int64(NumPointsPerRecord), uint8([0;0]), 0, int64([0;0]), int64([0;0]), [0;0], [0;0], [0;0], 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function returns the (multi-record) waveform the digitizer acquired for the specified channel. The waveform is from a previously initiated acquisition.  Returned waveform data units are raw ADC values.  Unsigned byte data is actually signed (+-128) a</Description>
            </Method>
            <Method>
               <Name>FetchMultiRecordWaveformReal64</Name>
               <Location>channel3multirecordmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement] = FetchMultiRecordWaveformReal64(obj, FirstRecord, NumRecords, OffsetWithinRecord, NumPointsPerRecord, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels3;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.MultiRecordMeasurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement] = comobj.FetchMultiRecordWaveformReal64(int64(FirstRecord), int64(NumRecords), int64(OffsetWithinRecord), int64(NumPointsPerRecord), [0;0], 0, int64([0;0]), int64([0;0]), [0;0], [0;0], [0;0], 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function returns the (multi-record) waveform the digitizer acquired for the specified channel. The waveform is from a previously initiated acquisition.  Returned waveform data units are Volts.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>channeldigitaldownconversion</Name>
         <Description>IAgMD1ChannelDigitalDownconversion interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ChannelDigitalDownconversion1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>DataBandwidth</Name>
               <Location>channeldigitaldownconversion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	propertyValue = comobj.DataBandwidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	comobj.DataBandwidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The output bandwidth in Hz for down-converted data.  Range: 250e6, 200e6, 100e6, 50e6 etc following progression f(n+1) = f(n)/ 2, down to 2GHz/(2^21) = about 1 kHz. Requires Model: M9202A</Description>
            </Property>
            <Property>
               <Name>DoubleDataRateEnabled</Name>
               <Location>channeldigitaldownconversion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	propertyValue = comobj.DoubleDataRateEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	comobj.DoubleDataRateEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>False = simple data rate (Samples / second = 1.25*bandwidth), True = double data rate (Samples / second = 2.5*bandwidth)    Note: only applies for DataBandwidth values of 1.0e8 and below. Requires Model: M9202A</Description>
            </Property>
            <Property>
               <Name>FlipBandEnabled</Name>
               <Location>channeldigitaldownconversion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	propertyValue = comobj.FlipBandEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	comobj.FlipBandEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>True = First frequency shift is by -500MHz.  False = First frequency shift is by +500MHz. Requires Model: M9202A</Description>
            </Property>
            <Property>
               <Name>FrequencyShift</Name>
               <Location>channeldigitaldownconversion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	propertyValue = comobj.FrequencyShift;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	comobj.FrequencyShift = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Decoded to set up the frequency shift blocks of the down converter. The value of this attribute corresponds to the data frequency shift; trigger frequency shift is the nearest value available with the given TriggerBandwidth. I. e. the trigger frequency sh</Description>
            </Property>
            <Property>
               <Name>TriggerBandwidth</Name>
               <Location>channeldigitaldownconversion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	propertyValue = comobj.TriggerBandwidth;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.DigitalDownconversion;
	comobj.TriggerBandwidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The output bandwidth in Hz for down-converted trigger. Requires Model: M9202A</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>channeldigitaldownconversion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, DataBandwidth, TriggerBandwidth)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.DigitalDownconversion;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(DataBandwidth), double(TriggerBandwidth));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the DigitalDownconverson DataBandwidth and TriggerBandwidth. Requires Model: M9202A</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>channelfilter</Name>
         <Description>AgMD1 instrument-specific channel filter interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ChannelFilter1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Bypass</Name>
               <Location>channelfilter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	propertyValue = comobj.Bypass;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	comobj.Bypass = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether or not to bypass the input filter.</Description>
            </Property>
            <Property>
               <Name>MaxFrequency</Name>
               <Location>channelfilter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	propertyValue = comobj.MaxFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Filter;
	comobj.MaxFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the maximum input filter frequency.  Specifying a value of zero means that the device should be set to the full bandwidth that the filter can deliver without being bypassed.  The units are Hertz.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>channelmeasurement</Name>
         <Description>AgMD1 instrument-specific measurement interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ChannelMeasurement1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>WaveformType</Name>
               <Location>channelmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Measurement;
	propertyValue = comobj.WaveformType;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Measurement;
	comobj.WaveformType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1MeasurementWaveformTypeUnknown" Value="AgMD1MeasurementWaveformTypeUnknown"/>
                     <Enum Name="AgMD1MeasurementWaveformTypeSine" Value="AgMD1MeasurementWaveformTypeSine"/>
                     <Enum Name="AgMD1MeasurementWaveformTypeSquare" Value="AgMD1MeasurementWaveformTypeSquare"/>
                     <Enum Name="AgMD1MeasurementWaveformTypeRamp" Value="AgMD1MeasurementWaveformTypeRamp"/>
                     <Enum Name="AgMD1MeasurementWaveformTypePulsedDC" Value="AgMD1MeasurementWaveformTypePulsedDC"/>
                     <Enum Name="AgMD1MeasurementWaveformTypeStep" Value="AgMD1MeasurementWaveformTypeStep"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1MeasurementWaveformTypeUnknown</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The waveform type used to calculate the various measurement functions by the FetchWaveformMeasurement and ReadWaveformMeasurement methods.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>FetchWaveformInt16</Name>
               <Location>channelmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = FetchWaveformInt16(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.FetchWaveformInt16(int16([0;0]), 0, 0, 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function returns the waveform the digitizer acquired for the specified channel. The waveform is from a previously initiated acquisition.  Returned waveform data units are raw ADC values which may be converted to volts by the formula: V = ScaleFactor </Description>
            </Method>
            <Method>
               <Name>FetchWaveformInt32</Name>
               <Location>channelmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = FetchWaveformInt32(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.FetchWaveformInt32(int32([0;0]), 0, 0, 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform for this channel. The acquisition must be made prior to calling this method.  Call this method separately for each channel.  Returned waveform data units are raw ADC values which may be converted to volts by the form</Description>
            </Method>
            <Method>
               <Name>FetchWaveformInt8</Name>
               <Location>channelmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = FetchWaveformInt8(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.FetchWaveformInt8(uint8([0;0]), 0, 0, 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform for this channel. The acquisition must be made prior to calling this method.  Call this method separately for each channel.  Returned waveform data units are raw ADC values.  Unsigned byte data is actually signed (+-</Description>
            </Method>
            <Method>
               <Name>FetchWaveformMeasurement</Name>
               <Location>channelmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = FetchWaveformMeasurement(obj, MeasFunction, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[Measurement] = comobj.FetchWaveformMeasurement(MeasFunction, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform measurement for this channel.  The acquisition must be made prior to calling this method.  Call this method separately for each measurement.</Description>
            </Method>
            <Method>
               <Name>FetchWaveformReal64</Name>
               <Location>channelmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement] = FetchWaveformReal64(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement] = comobj.FetchWaveformReal64([0;0], 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform for this channel. The acquisition must be made prior to calling this method.  Call this method separately for each channel.  Returned waveform data units are Volts.</Description>
            </Method>
            <Method>
               <Name>ReadWaveformInt16</Name>
               <Location>channelmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = ReadWaveformInt16(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.ReadWaveformInt16(int32(MaxTimeMilliseconds), int16([0;0]), 0, 0, 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTimeMilliseconds) for the acquisition to complete, and returns the waveform for this channel.  Call FetchWaveform to obtain the waveforms for other channels.  Returned waveform data units a</Description>
            </Method>
            <Method>
               <Name>ReadWaveformInt32</Name>
               <Location>channelmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = ReadWaveformInt32(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.ReadWaveformInt32(int32(MaxTimeMilliseconds), int32([0;0]), 0, 0, 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTimeMilliseconds) for the acquisition to complete, and returns the waveform for this channel.  Call FetchWaveform to obtain the waveforms for other channels.  Returned waveform data units a</Description>
            </Method>
            <Method>
               <Name>ReadWaveformInt8</Name>
               <Location>channelmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = ReadWaveformInt8(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.ReadWaveformInt8(int32(MaxTimeMilliseconds), uint8([0;0]), 0, 0, 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTimeMilliseconds) for the acquisition to complete, and returns the waveform for this channel.  Call FetchWaveform to obtain the waveforms for other channels.  Returned waveform data units a</Description>
            </Method>
            <Method>
               <Name>ReadWaveformMeasurement</Name>
               <Location>channelmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = ReadWaveformMeasurement(obj, MeasFunction, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[Measurement] = comobj.ReadWaveformMeasurement(MeasFunction, int32(MaxTimeMilliseconds), 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the measurement for this channel.  Call FetchWaveformMeasurement to obtain other measurements for this or other channels.</Description>
            </Method>
            <Method>
               <Name>ReadWaveformReal64</Name>
               <Location>channelmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement] = ReadWaveformReal64(obj, MaxTimeMilliseconds, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Measurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement] = comobj.ReadWaveformReal64(int32(MaxTimeMilliseconds), [0;0], 0, 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTimeMilliseconds) for the acquisition to complete, and returns the waveform for this channel.  Call FetchWaveform to obtain the waveforms for other channels.  Returned waveform data units a</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>channelmultirecordmeasurement</Name>
         <Description>AgMD1 instrument-specific multi-record measurement interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ChannelMultiRecordMeasurement1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>FetchMultiRecordWaveformInt16</Name>
               <Location>channelmultirecordmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = FetchMultiRecordWaveformInt16(obj, FirstRecord, NumRecords, OffsetWithinRecord, NumPointsPerRecord, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.MultiRecordMeasurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.FetchMultiRecordWaveformInt16(int64(FirstRecord), int64(NumRecords), int64(OffsetWithinRecord), int64(NumPointsPerRecord), int16([0;0]), 0, int64([0;0]), int64([0;0]), [0;0], [0;0], [0;0], 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function returns the (multi-record) waveform the digitizer acquired for the specified channel. The waveform is from a previously initiated acquisition.  Returned waveform data units are raw ADC values which may be converted to volts by the formula: V</Description>
            </Method>
            <Method>
               <Name>FetchMultiRecordWaveformInt32</Name>
               <Location>channelmultirecordmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = FetchMultiRecordWaveformInt32(obj, FirstRecord, NumRecords, OffsetWithinRecord, NumPointsPerRecord, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.MultiRecordMeasurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.FetchMultiRecordWaveformInt32(int64(FirstRecord), int64(NumRecords), int64(OffsetWithinRecord), int64(NumPointsPerRecord), int32([0;0]), 0, int64([0;0]), int64([0;0]), [0;0], [0;0], [0;0], 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function returns the (multi-record) waveform the digitizer acquired for the specified channel. The waveform is from a previously initiated acquisition.  Returned waveform data units are raw ADC values which may be converted to volts by the formula: V</Description>
            </Method>
            <Method>
               <Name>FetchMultiRecordWaveformInt8</Name>
               <Location>channelmultirecordmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = FetchMultiRecordWaveformInt8(obj, FirstRecord, NumRecords, OffsetWithinRecord, NumPointsPerRecord, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.MultiRecordMeasurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement, ScaleFactor, ScaleOffset] = comobj.FetchMultiRecordWaveformInt8(int64(FirstRecord), int64(NumRecords), int64(OffsetWithinRecord), int64(NumPointsPerRecord), uint8([0;0]), 0, int64([0;0]), int64([0;0]), [0;0], [0;0], [0;0], 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function returns the (multi-record) waveform the digitizer acquired for the specified channel. The waveform is from a previously initiated acquisition.  Returned waveform data units are raw ADC values.  Unsigned byte data is actually signed (+-128) a</Description>
            </Method>
            <Method>
               <Name>FetchMultiRecordWaveformReal64</Name>
               <Location>channelmultirecordmeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement] = FetchMultiRecordWaveformReal64(obj, FirstRecord, NumRecords, OffsetWithinRecord, NumPointsPerRecord, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.MultiRecordMeasurement;
feature('COM_SafeArraySingleDim',1);
[WaveformArray, ActualRecords, ActualPoints, FirstValidPoint, InitialXOffset, InitialXTimeSeconds, InitialXTimeFraction, XIncrement] = comobj.FetchMultiRecordWaveformReal64(int64(FirstRecord), int64(NumRecords), int64(OffsetWithinRecord), int64(NumPointsPerRecord), [0;0], 0, int64([0;0]), int64([0;0]), [0;0], [0;0], [0;0], 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function returns the (multi-record) waveform the digitizer acquired for the specified channel. The waveform is from a previously initiated acquisition.  Returned waveform data units are Volts.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>channels</Name>
         <Description>AgMD1 instrument-specific channels repeated capability collection interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channels1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ActiveInputs</Name>
               <Location>channels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	propertyValue = comobj.ActiveInputs;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	comobj.ActiveInputs = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>String indicating which channels are active. Concatenation of 'Ch&lt;n&gt;', e.g. 'Ch1', or 'Ch3Ch4', etc.</Description>
            </Property>
            <Property>
               <Name>ConvertersPerChannel</Name>
               <Location>channels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	propertyValue = comobj.ConvertersPerChannel;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The number of converters currently assigned to each channel.</Description>
            </Property>
            <Property>
               <Name>Count</Name>
               <Location>channels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the number of Channels.</Description>
            </Property>
            <Property>
               <Name>ReferenceChannel</Name>
               <Location>channels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	propertyValue = comobj.ReferenceChannel;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	comobj.ReferenceChannel = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The channel to which the reference signal is connected to. Some measurements are relative to a reference signal and require this property to be set accordingly.  Valid strings: Channel1, Channel2, ...</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Item</Name>
               <Location>channels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgMD1Channel interface.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>channels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Returns the Channel name for a given index.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>channels2</Name>
         <Description>IAgMD1Channels2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channels21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ActiveInputs</Name>
               <Location>channels2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	propertyValue = comobj.ActiveInputs;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	comobj.ActiveInputs = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>String indicating which channels are active. Concatenation of 'Ch&lt;n&gt;', e.g. 'Ch1', or 'Ch3Ch4', etc.</Description>
            </Property>
            <Property>
               <Name>ConvertersPerChannel</Name>
               <Location>channels2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	propertyValue = comobj.ConvertersPerChannel;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The number of converters currently assigned to each channel.</Description>
            </Property>
            <Property>
               <Name>Count</Name>
               <Location>channels2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the number of Channels.</Description>
            </Property>
            <Property>
               <Name>ReferenceChannel</Name>
               <Location>channels2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	propertyValue = comobj.ReferenceChannel;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels2;
	comobj.ReferenceChannel = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The channel to which the reference signal is connected to. Some measurements are relative to a reference signal and require this property to be set accordingly.  Valid strings: Channel1, Channel2, ...</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Item</Name>
               <Location>channels2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels2;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgMD1Channel interface.</Description>
            </Method>
            <Method>
               <Name>Item2</Name>
               <Location>channels2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item2(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels2;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item2(Name, varargin{:});
end
[Val] = comobj.Item2(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgMD1Channel interface.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>channels2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels2;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Returns the Channel name for a given index.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>channels3</Name>
         <Description>IAgMD1Channels3 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channels31" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ActiveInputs</Name>
               <Location>channels3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	propertyValue = comobj.ActiveInputs;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	comobj.ActiveInputs = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>String indicating which channels are active. Concatenation of 'Ch&lt;n&gt;', e.g. 'Ch1', or 'Ch3Ch4', etc.</Description>
            </Property>
            <Property>
               <Name>ConvertersPerChannel</Name>
               <Location>channels3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	propertyValue = comobj.ConvertersPerChannel;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The number of converters currently assigned to each channel.</Description>
            </Property>
            <Property>
               <Name>Count</Name>
               <Location>channels3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the number of Channels.</Description>
            </Property>
            <Property>
               <Name>ReferenceChannel</Name>
               <Location>channels3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	propertyValue = comobj.ReferenceChannel;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels3;
	comobj.ReferenceChannel = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The channel to which the reference signal is connected to. Some measurements are relative to a reference signal and require this property to be set accordingly.  Valid strings: Channel1, Channel2, ...</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Item</Name>
               <Location>channels3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels3;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgMD1Channel interface.</Description>
            </Method>
            <Method>
               <Name>Item2</Name>
               <Location>channels3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item2(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels3;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item2(Name, varargin{:});
end
[Val] = comobj.Item2(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgMD1Channel interface.</Description>
            </Method>
            <Method>
               <Name>Item3</Name>
               <Location>channels3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item3(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels3;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item3(Name, varargin{:});
end
[Val] = comobj.Item3(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgMD1Channel interface.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>channels3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels3;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Returns the Channel name for a given index.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>controlio</Name>
         <Description>IAgMD1ControlIO interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ControlIO1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>SignalA</Name>
               <Location>controlio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ControlIO;
	propertyValue = comobj.SignalA;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ControlIO;
	comobj.SignalA = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Signal present on Control IO connector A.  Valid strings are: Disabled, In-GateForTriggerAND, Out-10MHzReferenceClock, Out-AcquisitionActive, Out-SkippingToNextSeg, Out-TriggerArmed, Out-LowLevel, Out-HighLevel, Out-TriggerAcceptedResync.</Description>
            </Property>
            <Property>
               <Name>SignalB</Name>
               <Location>controlio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ControlIO;
	propertyValue = comobj.SignalB;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ControlIO;
	comobj.SignalB = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Signal present on Control IO connector B.  Valid strings are: Disabled, In-GateForTriggerAND, Out-10MHzReferenceClock, Out-AcquisitionActive, Out-SkippingToNextSeg, Out-TriggerArmed, Out-LowLevel, Out-HighLevel, Out-TriggerAcceptedResync.</Description>
            </Property>
            <Property>
               <Name>SignalC</Name>
               <Location>controlio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ControlIO;
	propertyValue = comobj.SignalC;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ControlIO;
	comobj.SignalC = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Signal present on Control IO connector C if present.  Valid strings are: Disabled, In-GateForTriggerAND, Out-10MHzReferenceClock, Out-AcquisitionActive, Out-SkippingToNextSeg, Out-TriggerArmed</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>driveroperation</Name>
         <Description>IVI Driver operation interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="DriverOperation1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Cache</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.Cache;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.Cache = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver caches instrument settings to avoid unnecessary I/O to the instrument.  The actual settings that are cached are driver-specific.</Description>
            </Property>
            <Property>
               <Name>DriverSetup</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.DriverSetup;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The driver setup string.  It is either specified in the Configuration Store or passed in the OptionString parameter of the Initialize function.  Driver setup is empty if the driver is not initialized.</Description>
            </Property>
            <Property>
               <Name>InterchangeCheck</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.InterchangeCheck;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.InterchangeCheck = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver maintains a record of interchangeability warnings.  If the driver does not support interchangeability checking, attempts to set InterchangeCheck to True return an error.</Description>
            </Property>
            <Property>
               <Name>IoResourceDescriptor</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.IoResourceDescriptor;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The resource descriptor specifies the connection to a physical device.  It is either specified in the Configuration Store or passed in the ResourceName parameter of the Initialize function.  It is empty if the driver is not initialized.</Description>
            </Property>
            <Property>
               <Name>LogicalName</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.LogicalName;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Logical Name identifies a driver session in the Configuration Store.  If Logical Name is not empty, the driver was initialized from information in the driver session.  If it is empty, the driver was initialized without using the Configuration Store.</Description>
            </Property>
            <Property>
               <Name>QueryInstrumentStatus</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.QueryInstrumentStatus;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.QueryInstrumentStatus = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver queries the instrument status at the end of each method or property that performs I/O to the instrument.  If an error is reported, use ErrorQuery to retrieve error messages one at a time from the instrument.</Description>
            </Property>
            <Property>
               <Name>RangeCheck</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.RangeCheck;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.RangeCheck = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver validates property and parameter values to avoid invalid commands to the instrument.  The extent of the validation is driver-specific.</Description>
            </Property>
            <Property>
               <Name>RecordCoercions</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.RecordCoercions;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.RecordCoercions = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver keeps a list of the value coercions it makes for ViInt32 and ViReal64 attributes.  If the driver does not support coercion recording, attempts to set RecordCoercions to True will return an error.</Description>
            </Property>
            <Property>
               <Name>Simulate</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.Simulate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.Simulate = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver does not perform I/O to the instrument, and returns simulated values for output parameters.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ClearInterchangeWarnings</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ClearInterchangeWarnings(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DriverOperation;
feature('COM_SafeArraySingleDim',1);
comobj.ClearInterchangeWarnings();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears the list of interchangeability warnings that the IVI specific driver maintains.</Description>
            </Method>
            <Method>
               <Name>GetNextCoercionRecord</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [CoercionRecord] = GetNextCoercionRecord(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DriverOperation;
feature('COM_SafeArraySingleDim',1);
[CoercionRecord] = comobj.GetNextCoercionRecord();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the oldest record from the coercion record list.  Records are only added to the list if RecordCoercions is True.</Description>
            </Method>
            <Method>
               <Name>GetNextInterchangeWarning</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [InterchangeWarning] = GetNextInterchangeWarning(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DriverOperation;
feature('COM_SafeArraySingleDim',1);
[InterchangeWarning] = comobj.GetNextInterchangeWarning();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the oldest warning from the interchange warning list.  Records are only added to the list if InterchangeCheck is True.</Description>
            </Method>
            <Method>
               <Name>InvalidateAllAttributes</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function InvalidateAllAttributes(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DriverOperation;
feature('COM_SafeArraySingleDim',1);
comobj.InvalidateAllAttributes();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Invalidates all of the driver's cached values.</Description>
            </Method>
            <Method>
               <Name>ResetInterchangeCheck</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ResetInterchangeCheck(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DriverOperation;
feature('COM_SafeArraySingleDim',1);
comobj.ResetInterchangeCheck();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Resets the interchangeability checking algorithms of the driver so that methods and properties that executed prior to calling this function have no affect on whether future calls to the driver generate interchangeability warnings.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>identity</Name>
         <Description>IVI Driver driver identity interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Identity1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Description</Name>
               <Location>identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.Description;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>A brief description of the implementing component.  Description is limted to 256 bytes.</Description>
            </Property>
            <Property>
               <Name>GroupCapabilities</Name>
               <Location>identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.GroupCapabilities;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>A comma-separated list of the class capability groups implemented by the driver.  Capability group names are documented in the IVI class specifications.  If the driver is not class compliant, the driver returns an empty string.</Description>
            </Property>
            <Property>
               <Name>Identifier</Name>
               <Location>identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.Identifier;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The case-sensitive unique identifier of the implementing IVI-COM instrument driver.</Description>
            </Property>
            <Property>
               <Name>InstrumentFirmwareRevision</Name>
               <Location>identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.InstrumentFirmwareRevision;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The firmware revision reported by the physical instrument.  If Simulation is enabled or the instrument is not capable of reporting the firmware revision, a string is returned that explains the condition.</Description>
            </Property>
            <Property>
               <Name>InstrumentManufacturer</Name>
               <Location>identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.InstrumentManufacturer;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The name of the manufacturer reported by the physical instrument.  If Simulation is enabled or the instrument is not capable of reporting the name of the manufacturer, a string is returned that explains the condition. Manufacturer is limited to 256 bytes</Description>
            </Property>
            <Property>
               <Name>InstrumentModel</Name>
               <Location>identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.InstrumentModel;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The model number or name reported by the physical instrument.  If Simulation is enabled or the instrument is not capable of reporting the model number or name, a string is returned that explains the condition.  Model is limited to 256 bytes</Description>
            </Property>
            <Property>
               <Name>Revision</Name>
               <Location>identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.Revision;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The revision of the implementing component.  Refer to IVI-3.2, Section 3.1.2.2, for a description of revision syntax and semantics.  Revision is limited to 256 bytes.</Description>
            </Property>
            <Property>
               <Name>SpecificationMajorVersion</Name>
               <Location>identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.SpecificationMajorVersion;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>For IVI class-compliant drivers, the major version number of the instrument class specification.  If the driver is not class compliant, the driver returns zero.</Description>
            </Property>
            <Property>
               <Name>SpecificationMinorVersion</Name>
               <Location>identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.SpecificationMinorVersion;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>For IVI class-compliant drivers, the minor version number of the instrument class specification.  If the driver is not class compliant, the driver returns zero.</Description>
            </Property>
            <Property>
               <Name>SupportedInstrumentModels</Name>
               <Location>identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.SupportedInstrumentModels;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>A comma-separated list of instrument models that the IVI specific driver can control.</Description>
            </Property>
            <Property>
               <Name>Vendor</Name>
               <Location>identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.Vendor;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The name of the vendor that supplies the implementing component.  Vendor is limited to 256 bytes.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>instrumentinfo</Name>
         <Description>IAgMD1SystemInstrumentInfo interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentInfo1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AqDrvVersion</Name>
               <Location>instrumentinfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo;
	propertyValue = comobj.AqDrvVersion;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Version of the AqDrv Device Driver.  Read only</Description>
            </Property>
            <Property>
               <Name>AqIOVersion</Name>
               <Location>instrumentinfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo;
	propertyValue = comobj.AqIOVersion;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Version of the Agilent Acqiris IO Driver.  Read only</Description>
            </Property>
            <Property>
               <Name>BusNumber</Name>
               <Location>instrumentinfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo;
	propertyValue = comobj.BusNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>PCI Bus number.  Read only</Description>
            </Property>
            <Property>
               <Name>CPLDFirmwareRev</Name>
               <Location>instrumentinfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo;
	propertyValue = comobj.CPLDFirmwareRev;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Revision of the CPLD Firmware.  Read only</Description>
            </Property>
            <Property>
               <Name>CrateNumber</Name>
               <Location>instrumentinfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo;
	propertyValue = comobj.CrateNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Crate number.  Starts at 121000 for autodetected CC121 crates.  Read only</Description>
            </Property>
            <Property>
               <Name>DeviceID</Name>
               <Location>instrumentinfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo;
	propertyValue = comobj.DeviceID;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>PCI Device ID.  Read only</Description>
            </Property>
            <Property>
               <Name>EEPROMCommonSectionRev</Name>
               <Location>instrumentinfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo;
	propertyValue = comobj.EEPROMCommonSectionRev;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Revision of the EEPROM Common Section.  Read only</Description>
            </Property>
            <Property>
               <Name>EEPROMDigitizerSectionRev</Name>
               <Location>instrumentinfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo;
	propertyValue = comobj.EEPROMDigitizerSectionRev;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Revision of the EEPROM Digitizer Section.  Read only</Description>
            </Property>
            <Property>
               <Name>HasHighResSampleRate</Name>
               <Location>instrumentinfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo;
	propertyValue = comobj.HasHighResSampleRate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>True if the instrument features a high resolution sampling rate.  Read only</Description>
            </Property>
            <Property>
               <Name>NbrADCBits</Name>
               <Location>instrumentinfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo;
	propertyValue = comobj.NbrADCBits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Number of bits of data per sample from this module's ADCs.  Read only</Description>
            </Property>
            <Property>
               <Name>NbrExternalTriggers</Name>
               <Location>instrumentinfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo;
	propertyValue = comobj.NbrExternalTriggers;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Number of external trigger sources.  Read only</Description>
            </Property>
            <Property>
               <Name>NbrInternalTriggers</Name>
               <Location>instrumentinfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo;
	propertyValue = comobj.NbrInternalTriggers;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Number of internal trigger sources.  Read only</Description>
            </Property>
            <Property>
               <Name>NbrModulesInInstrument</Name>
               <Location>instrumentinfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo;
	propertyValue = comobj.NbrModulesInInstrument;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Number of modules in this instrument.  An "instrument" may be a single digitizer module or multiple modules joined using the ASBus connectors.  Individual modules (not connected by ASBus) return 1.  Read only</Description>
            </Property>
            <Property>
               <Name>Options</Name>
               <Location>instrumentinfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo;
	propertyValue = comobj.Options;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>List of comma separated options installed in this instrument.  Read only</Description>
            </Property>
            <Property>
               <Name>SerialNumber</Name>
               <Location>instrumentinfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo;
	propertyValue = comobj.SerialNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Deprecated - Do not use. Use SerialNumberString.  The serial number of the instrument.  Read only</Description>
            </Property>
            <Property>
               <Name>SlotNumber</Name>
               <Location>instrumentinfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo;
	propertyValue = comobj.SlotNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The slot number as indicated on the crate's front panel (for Agilent Acqiris CCxxx crates).  Read only</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>instrumentinfo2</Name>
         <Description>IAgMD1InstrumentInfo2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentInfo21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AqDrvVersion</Name>
               <Location>instrumentinfo2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo2;
	propertyValue = comobj.AqDrvVersion;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Version of the AqDrv Device Driver.  Read only</Description>
            </Property>
            <Property>
               <Name>AqIOVersion</Name>
               <Location>instrumentinfo2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo2;
	propertyValue = comobj.AqIOVersion;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Version of the Agilent Acqiris IO Driver.  Read only</Description>
            </Property>
            <Property>
               <Name>BusNumber</Name>
               <Location>instrumentinfo2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo2;
	propertyValue = comobj.BusNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>PCI Bus number.  Read only</Description>
            </Property>
            <Property>
               <Name>CPLDFirmwareRev</Name>
               <Location>instrumentinfo2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo2;
	propertyValue = comobj.CPLDFirmwareRev;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Revision of the CPLD Firmware.  Read only</Description>
            </Property>
            <Property>
               <Name>CrateNumber</Name>
               <Location>instrumentinfo2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo2;
	propertyValue = comobj.CrateNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Crate number.  Starts at 121000 for autodetected CC121 crates.  Read only</Description>
            </Property>
            <Property>
               <Name>DeviceID</Name>
               <Location>instrumentinfo2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo2;
	propertyValue = comobj.DeviceID;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>PCI Device ID.  Read only</Description>
            </Property>
            <Property>
               <Name>EEPROMCommonSectionRev</Name>
               <Location>instrumentinfo2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo2;
	propertyValue = comobj.EEPROMCommonSectionRev;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Revision of the EEPROM Common Section.  Read only</Description>
            </Property>
            <Property>
               <Name>EEPROMDigitizerSectionRev</Name>
               <Location>instrumentinfo2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo2;
	propertyValue = comobj.EEPROMDigitizerSectionRev;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Revision of the EEPROM Digitizer Section.  Read only</Description>
            </Property>
            <Property>
               <Name>FundamentalHandle</Name>
               <Location>instrumentinfo2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo2;
	propertyValue = comobj.FundamentalHandle;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the Int32 equivalent ViSession handle to the fundamental API used to control the module hardware.  Never call the fundamental Acqrs_close or Acqrs_closeAll functions with this handle or the driver will cease to operate.  Use the IVI driver's Close</Description>
            </Property>
            <Property>
               <Name>HasHighResSampleRate</Name>
               <Location>instrumentinfo2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo2;
	propertyValue = comobj.HasHighResSampleRate;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>True if the instrument features a high resolution sampling rate.  Read only</Description>
            </Property>
            <Property>
               <Name>NbrADCBits</Name>
               <Location>instrumentinfo2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo2;
	propertyValue = comobj.NbrADCBits;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Number of bits of data per sample from this module's ADCs.  Read only</Description>
            </Property>
            <Property>
               <Name>NbrExternalTriggers</Name>
               <Location>instrumentinfo2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo2;
	propertyValue = comobj.NbrExternalTriggers;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Number of external trigger sources.  Read only</Description>
            </Property>
            <Property>
               <Name>NbrInternalTriggers</Name>
               <Location>instrumentinfo2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo2;
	propertyValue = comobj.NbrInternalTriggers;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Number of internal trigger sources.  Read only</Description>
            </Property>
            <Property>
               <Name>NbrModulesInInstrument</Name>
               <Location>instrumentinfo2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo2;
	propertyValue = comobj.NbrModulesInInstrument;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Number of modules in this instrument.  An "instrument" may be a single digitizer module or multiple modules joined using the ASBus connectors.  Individual modules (not connected by ASBus) return 1.  Read only</Description>
            </Property>
            <Property>
               <Name>Options</Name>
               <Location>instrumentinfo2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo2;
	propertyValue = comobj.Options;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>List of comma separated options installed in this instrument.  Read only</Description>
            </Property>
            <Property>
               <Name>SerialNumber</Name>
               <Location>instrumentinfo2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo2;
	propertyValue = comobj.SerialNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Deprecated - Do not use. Use SerialNumberString.  The serial number of the instrument.  Read only</Description>
            </Property>
            <Property>
               <Name>SerialNumberString</Name>
               <Location>instrumentinfo2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo2;
	propertyValue = comobj.SerialNumberString;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The serial number string of the instrument.  Read only</Description>
            </Property>
            <Property>
               <Name>SlotNumber</Name>
               <Location>instrumentinfo2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.InstrumentInfo2;
	propertyValue = comobj.SlotNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The slot number as indicated on the crate's front panel (for Agilent Acqiris CCxxx crates).  Read only</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>logicdevice</Name>
         <Description>IAgMD1LogicDevice interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="LogicDevice1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>LoadLogicDeviceFromFile</Name>
               <Location>logicdevice</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function LoadLogicDeviceFromFile(obj, Path)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.LogicDevices;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.LoadLogicDeviceFromFile(Path);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Loads the bit file at the file system path Path into the FPGA(s) identified by the LogicDevice repeated capability.</Description>
            </Method>
            <Method>
               <Name>ReadIndirectInt32</Name>
               <Location>logicdevice</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Data] = ReadIndirectInt32(obj, Id, StartAddress, NumElements, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.LogicDevices;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[Data] = comobj.ReadIndirectInt32(int32(Id), int32(StartAddress), int32(NumElements), int32([0;0]));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reads up to NumElements 32 bit integers of the Indirect Buffer with identifier Id from the FPGA identified by LogicDevice repeated capagility into the memory referenced by Data.</Description>
            </Method>
            <Method>
               <Name>ReadRegisterInt32</Name>
               <Location>logicdevice</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Value] = ReadRegisterInt32(obj, Offset, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.LogicDevices;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[Value] = comobj.ReadRegisterInt32(int32(Offset), 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reads a 32 bits integer value from the register at Offset in the FPGA identified by LogicDevice repeated capability.</Description>
            </Method>
            <Method>
               <Name>WriteIndirectInt32</Name>
               <Location>logicdevice</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteIndirectInt32(obj, Id, StartAddress, NumElements, Data)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.LogicDevices;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.WriteIndirectInt32(int32(Id), int32(StartAddress), int32(NumElements), int32(Data));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Writes the contents of Data to the Indirect Buffer with identifier Id of the FPGA identified by LogicDevice repeated capability.</Description>
            </Method>
            <Method>
               <Name>WriteRegisterInt32</Name>
               <Location>logicdevice</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteRegisterInt32(obj, Offset, Value)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.LogicDevices;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.WriteRegisterInt32(int32(Offset), int32(Value));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Writes the 32 bits integer value Value to the register at Offset in the FPGA identified by LogicDevice repeated capability.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>logicdevices</Name>
         <Description>IAgMD1LogicDevices interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="LogicDevices1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>logicdevices</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.LogicDevices;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the number of logic devices.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Item</Name>
               <Location>logicdevices</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.LogicDevices;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgMD1LogicDevice interface.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>logicdevices</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.LogicDevices;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Returns the logic device name for a given index.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>referencelevel</Name>
         <Description>AgMD1 instrument-specific reference level interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ReferenceLevel1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>High</Name>
               <Location>referencelevel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceLevel;
	propertyValue = comobj.High;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceLevel;
	comobj.High = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The high reference for waveform measurements.  It is a percentage of the difference between the Voltage High and Voltage Low.  Voltage High and Voltage Low may be calculated using either the min/max or histogram methods.</Description>
            </Property>
            <Property>
               <Name>Low</Name>
               <Location>referencelevel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceLevel;
	propertyValue = comobj.Low;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceLevel;
	comobj.Low = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The low reference for waveform measurements.  It is a percentage of the difference between the Voltage High and Voltage Low.  Voltage High and Voltage Low may be calculated using either the min/max or histogram methods.</Description>
            </Property>
            <Property>
               <Name>Mid</Name>
               <Location>referencelevel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceLevel;
	propertyValue = comobj.Mid;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceLevel;
	comobj.Mid = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The mid reference for waveform measurements.  It is a percentage of the difference between the Voltage High and Voltage Low.  Voltage High and Voltage Low may be calculated using either the min/max or histogram methods.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>referencelevel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Low, Mid, High)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ReferenceLevel;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Low), double(Mid), double(High));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the reference levels for waveform measurements, low, mid, and high.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>referenceoscillator</Name>
         <Description>AgMD1 instrument-specific reference oscillator interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ReferenceOscillator1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ExternalFrequency</Name>
               <Location>referenceoscillator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceOscillator;
	propertyValue = comobj.ExternalFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Read only.  The frequency of the external signal which is as a frequency reference. This value is used only if the Reference Oscillator Source attribute is set to External. The units are Hertz.</Description>
            </Property>
            <Property>
               <Name>OutputEnabled</Name>
               <Location>referenceoscillator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceOscillator;
	propertyValue = comobj.OutputEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceOscillator;
	comobj.OutputEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether or not the reference frequency signal appears at the Control I/O "A" connector of the digitizer.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>referenceoscillator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceOscillator;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceOscillator;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1ReferenceOscillatorSourceInternal" Value="AgMD1ReferenceOscillatorSourceInternal"/>
                     <Enum Name="AgMD1ReferenceOscillatorSourceExternal" Value="AgMD1ReferenceOscillatorSourceExternal"/>
                     <Enum Name="AgMD1ReferenceOscillatorSourcePXIClk10" Value="AgMD1ReferenceOscillatorSourcePXIClk10"/>
                     <Enum Name="AgMD1ReferenceOscillatorSourcePXIeClk100" Value="AgMD1ReferenceOscillatorSourcePXIeClk100"/>
                     <Enum Name="AgMD1ReferenceOscillatorSourceAXIeClk100" Value="AgMD1ReferenceOscillatorSourceAXIeClk100"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1ReferenceOscillatorSourceInternal</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the reference frequency source used.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>sampleclock</Name>
         <Description>AgMD1 instrument-specific sample clock interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SampleClock1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ExternalDivider</Name>
               <Location>sampleclock</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SampleClock;
	propertyValue = comobj.ExternalDivider;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Read only, the value by which the external sample clock should be divided.  This value is used only if the Sample Clock Source attribute is set to External.</Description>
            </Property>
            <Property>
               <Name>ExternalFrequency</Name>
               <Location>sampleclock</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SampleClock;
	propertyValue = comobj.ExternalFrequency;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SampleClock;
	comobj.ExternalFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the frequency of the external signal which is used as a sample clock. This value is used only if the Sample Clock Source attribute is set to External. The units are Hertz.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>sampleclock</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SampleClock;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.SampleClock;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1SampleClockSourceInternal" Value="AgMD1SampleClockSourceInternal"/>
                     <Enum Name="AgMD1SampleClockSourceExternal" Value="AgMD1SampleClockSourceExternal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1SampleClockSourceInternal</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the clock used to pace acquisition sampling.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>sampleclock</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, Frequency)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SampleClock;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, double(Frequency));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the digitizer's sample clock.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>system</Name>
         <Description>AgMD1 instrument-specific system interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="System1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>NbrInstruments</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	propertyValue = comobj.NbrInstruments;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The number of instruments supporting the AgMD1 driver in the system.  An "instrument" may be a single digitizer module or multiple modules joined using the ASBus connectors.  Read only</Description>
            </Property>
            <Property>
               <Name>TraceEnabled</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	propertyValue = comobj.TraceEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj.TraceEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>If true, output trace log of all driver calls to an XML file using a unique file name based on date and time in the same directory as the application executable accessing the driver OR as specified using tracing options when initializing the driver.  See </Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>PowerOffAll</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function PowerOffAll(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.PowerOffAll();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Forces all instruments to prepare and enter the system power down state.  Suspend all other calling threads. If a thread is performing a long operation which cannot be completed within milliseconds (e.g. a self-calibration), it will be interrupted immedia</Description>
            </Method>
            <Method>
               <Name>PowerOnAll</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function PowerOnAll(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.PowerOnAll();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Forces all instruments power up and return from the system power down state.  Re-enable the instruments at the same state as they were before the PowerOffAll method was invoked. Threads which were suspended will be resumed. However, interrupted operations</Description>
            </Method>
            <Method>
               <Name>ResumeControl</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ResumeControl(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.ResumeControl();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Resume the control of an instrument that was suspended (see SuspendControl).</Description>
            </Method>
            <Method>
               <Name>SuspendControl</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SuspendControl(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.SuspendControl();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Suspend control of an instrument to allow using it from another process. NOTE: This is only available for Windows operating systems.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>temperature</Name>
         <Description>AgMD1 instrument-specific temperature interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Temperature1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>BoardTemperature</Name>
               <Location>temperature</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Temperature;
	propertyValue = comobj.BoardTemperature;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Indicates the temperature of the entire board.  The units are governed by the Temperature.Units property.  Read only</Description>
            </Property>
            <Property>
               <Name>Units</Name>
               <Location>temperature</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Temperature;
	propertyValue = comobj.Units;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Temperature;
	comobj.Units = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TemperatureUnitsCelsius" Value="AgMD1TemperatureUnitsCelsius"/>
                     <Enum Name="AgMD1TemperatureUnitsFahrenheit" Value="AgMD1TemperatureUnitsFahrenheit"/>
                     <Enum Name="AgMD1TemperatureUnitsKelvin" Value="AgMD1TemperatureUnitsKelvin"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TemperatureUnitsCelsius</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the temperature units returned by the Board Temperature and the Channel Temperature attributes.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>GetModuleTemperature</Name>
               <Location>temperature</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = GetModuleTemperature(obj, ModuleNumber)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Temperature;
feature('COM_SafeArraySingleDim',1);
[Val] = comobj.GetModuleTemperature(int32(ModuleNumber));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Temperature of the specified module. The units are governed by the Temperature.Units property.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger</Name>
         <Description>AgMD1 instrument-specific trigger interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ActiveSource</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.ActiveSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.ActiveSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source the digitizer monitors for the trigger event. The value specified here must be one of the valid repeated capability names for the TriggerSource repeated capability (Channel&lt;n&gt;, External&lt;n&gt;) or "PXI_STAR".</Description>
            </Property>
            <Property>
               <Name>Delay</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.Delay;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.Delay = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the length of time from the trigger event to the first point in the waveform record. If the value is positive, the first point in the waveform record occurs after the trigger event. If the value is negative, the first point in the waveform recor</Description>
            </Property>
            <Property>
               <Name>Holdoff</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.Holdoff;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.Holdoff = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>-- NOT SUPPORTED -- Specifies the length of time the digitizer waits after it detects a trigger until the digitizer enables the trigger subsystem to detect another trigger. The units are seconds. The Trigger Holdoff attribute affects instrument operation </Description>
            </Property>
            <Property>
               <Name>Modifier</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.Modifier;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.Modifier = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerModifierNone" Value="AgMD1TriggerModifierNone"/>
                     <Enum Name="AgMD1TriggerModifierAuto" Value="AgMD1TriggerModifierAuto"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerModifierNone</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the trigger modifier. The trigger modifier determines the digitizer's behavior in the absence of the configured trigger.</Description>
            </Property>
            <Property>
               <Name>PxiTrigOutEnabled</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.PxiTrigOutEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.PxiTrigOutEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>If true, enables PXI trigger out signal.  Not allowed when ActiveSource is "PXI_STAR" as this uses the PXI signal as the trigger input.</Description>
            </Property>
            <Property>
               <Name>PxiTrigSlope</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.PxiTrigSlope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.PxiTrigSlope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerSlopeNegative" Value="AgMD1TriggerSlopeNegative"/>
                     <Enum Name="AgMD1TriggerSlopePositive" Value="AgMD1TriggerSlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerSlopeNegative</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether a rising or a falling edge triggers the digitizer.  This attribute affects instrument operation only when the ActiveSource attribute is set to "PXI_STAR".</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>SendSoftwareTrigger</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SendSoftwareTrigger(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
feature('COM_SafeArraySingleDim',1);
comobj.SendSoftwareTrigger();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Refer to IVI-3.3: Standard Cross-Class Capabilities Specification for the prototype and complete description of this function.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger2</Name>
         <Description>IAgMD1Trigger2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ActiveSource</Name>
               <Location>trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.ActiveSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.ActiveSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source the digitizer monitors for the trigger event. The value specified here must be one of the valid repeated capability names for the TriggerSource repeated capability (Channel&lt;n&gt;, External&lt;n&gt;) or "PXI_STAR".</Description>
            </Property>
            <Property>
               <Name>Delay</Name>
               <Location>trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.Delay;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.Delay = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the length of time from the trigger event to the first point in the waveform record. If the value is positive, the first point in the waveform record occurs after the trigger event. If the value is negative, the first point in the waveform recor</Description>
            </Property>
            <Property>
               <Name>Holdoff</Name>
               <Location>trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.Holdoff;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.Holdoff = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>-- NOT SUPPORTED -- Specifies the length of time the digitizer waits after it detects a trigger until the digitizer enables the trigger subsystem to detect another trigger. The units are seconds. The Trigger Holdoff attribute affects instrument operation </Description>
            </Property>
            <Property>
               <Name>Modifier</Name>
               <Location>trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.Modifier;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.Modifier = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerModifierNone" Value="AgMD1TriggerModifierNone"/>
                     <Enum Name="AgMD1TriggerModifierAuto" Value="AgMD1TriggerModifierAuto"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerModifierNone</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the trigger modifier. The trigger modifier determines the digitizer's behavior in the absence of the configured trigger.</Description>
            </Property>
            <Property>
               <Name>PxiTrigOutEnabled</Name>
               <Location>trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.PxiTrigOutEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.PxiTrigOutEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>If true, enables PXI trigger out signal.  Not allowed when ActiveSource is "PXI_STAR" as this uses the PXI signal as the trigger input.</Description>
            </Property>
            <Property>
               <Name>PxiTrigSlope</Name>
               <Location>trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	propertyValue = comobj.PxiTrigSlope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj.PxiTrigSlope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerSlopeNegative" Value="AgMD1TriggerSlopeNegative"/>
                     <Enum Name="AgMD1TriggerSlopePositive" Value="AgMD1TriggerSlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerSlopeNegative</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether a rising or a falling edge triggers the digitizer.  This attribute affects instrument operation only when the ActiveSource attribute is set to "PXI_STAR".</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>SendSoftwareTrigger</Name>
               <Location>trigger2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SendSoftwareTrigger(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger2;
feature('COM_SafeArraySingleDim',1);
comobj.SendSoftwareTrigger();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Refer to IVI-3.3: Standard Cross-Class Capabilities Specification for the prototype and complete description of this function.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger2multitrigger</Name>
         <Description>AgMD1 instrument-specific multi-trigger interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger2MultiTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>SourceList</Name>
               <Location>trigger2multitrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.MultiTrigger;
	propertyValue = comobj.SourceList;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.MultiTrigger;
	comobj.SourceList = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>A comma separated list of source names to be used in a multi trigger scenario.  This attribute only affects instrument behavior when the Trigger Source Operator attribute is set to AND or OR.  When Trigger Source Operator is set to AND, the trigger condit</Description>
            </Property>
            <Property>
               <Name>SourceOperator</Name>
               <Location>trigger2multitrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.MultiTrigger;
	propertyValue = comobj.SourceOperator;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.MultiTrigger;
	comobj.SourceOperator = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerSourceOperatorAND" Value="AgMD1TriggerSourceOperatorAND"/>
                     <Enum Name="AgMD1TriggerSourceOperatorOR" Value="AgMD1TriggerSourceOperatorOR"/>
                     <Enum Name="AgMD1TriggerSourceOperatorNone" Value="AgMD1TriggerSourceOperatorNone"/>
                     <Enum Name="AgMD1TriggerSourceOperatorNAND" Value="AgMD1TriggerSourceOperatorNAND"/>
                     <Enum Name="AgMD1TriggerSourceOperatorNOR" Value="AgMD1TriggerSourceOperatorNOR"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerSourceOperatorAND</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the boolean operation to apply to the arm sources specified by the SourceList property.  If set to None, muti triggering is disabled. A valid SourceList must be set before setting the SourceOperator to AND or OR.  See the help for SourceList for</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>trigger2multitrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, SourceList, Operator)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger2;
comobj = comobj.MultiTrigger;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(SourceList, Operator);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the digitizer to trigger based on multiple trigger sources.  The digitizer can be instructed to trigger when any one of multiple trigger source conditions are met or when all specified trigger source conditions are met.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger2output</Name>
         <Description>IAgMD1TriggerOutput interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger2Output1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>trigger2output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Output;
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Output;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether or not an accepted trigger appears at an output of the digitizer.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>trigger2output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Output;
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Output;
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Control of the Trigger Out signal offset.  This offset and the actual load connected will determine the signal shape (range).</Description>
            </Property>
            <Property>
               <Name>ResyncEnabled</Name>
               <Location>trigger2output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Output;
	propertyValue = comobj.ResyncEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Output;
	comobj.ResyncEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Controls whether the trigger out signal is resynchronized to the sampling clock (true) or maintains a precise timing relation to the trigger input (false).</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>trigger2output2</Name>
         <Description>IAgMD1TriggerOutput2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger2Output21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>trigger2output2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Output2;
	propertyValue = comobj.Enabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Output2;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether or not an accepted trigger appears at an output of the digitizer.</Description>
            </Property>
            <Property>
               <Name>MultiModuleSyncEnabled</Name>
               <Location>trigger2output2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Output2;
	propertyValue = comobj.MultiModuleSyncEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Output2;
	comobj.MultiModuleSyncEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>M9202A Multi Module Synchronization. Enable a M9202A to be the trigger master to synchronize multiple other M9202A modules (the trigger slaves modules). For all modules to synchronize, only one module can be the trigger master module while all others must</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>trigger2output2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Output2;
	propertyValue = comobj.Offset;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Output2;
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Control of the Trigger Out signal offset.  This offset and the actual load connected will determine the signal shape (range).</Description>
            </Property>
            <Property>
               <Name>ResyncEnabled</Name>
               <Location>trigger2output2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Output2;
	propertyValue = comobj.ResyncEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Output2;
	comobj.ResyncEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Controls whether the trigger out signal is resynchronized to the sampling clock (true) or maintains a precise timing relation to the trigger input (false).</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>trigger2output2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Output2;
	propertyValue = comobj.Source;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Output2;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Select the trigger source to drive the TRG OUT output connector on the front panel. Possible values are Channel1, ..., Channel&lt;n&gt; or External1, ..., External&lt;n&gt; trigger sources where &lt;n&gt; is the number of available channels or external trigger inputs. For </Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>trigger2source</Name>
         <Description>AgMD1 instrument-specific trigger source interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger2Source1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Coupling</Name>
               <Location>trigger2source</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Coupling;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Coupling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerCouplingAC" Value="AgMD1TriggerCouplingAC"/>
                     <Enum Name="AgMD1TriggerCouplingDC" Value="AgMD1TriggerCouplingDC"/>
                     <Enum Name="AgMD1TriggerCouplingHFReject" Value="AgMD1TriggerCouplingHFReject"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerCouplingAC</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies how the digitizer couples the trigger source.</Description>
            </Property>
            <Property>
               <Name>ExtTrigRange</Name>
               <Location>trigger2source</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ExtTrigRange;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.ExtTrigRange = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The absolute value of the trigger signal range the digitizer can use for the external trigger input.  The units are Volts.  For example, to use a trigger signal spanning -5.0 to 5.0 volts, set Range to 10.0 volts.</Description>
            </Property>
            <Property>
               <Name>Hysteresis</Name>
               <Location>trigger2source</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Hysteresis;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Hysteresis = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the trigger hysteresis in Volts.</Description>
            </Property>
            <Property>
               <Name>Level</Name>
               <Location>trigger2source</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Level;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Level = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the voltage threshold for the trigger sub-system. The units are Volts. This attribute affects instrument behavior only when the Trigger Type is set to one of the following values: Edge or Magnitude.  This attribute, along with the Trigger Slope,</Description>
            </Property>
            <Property>
               <Name>Trigger2SourceType</Name>
               <Location>trigger2source</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerEdge" Value="AgMD1TriggerEdge"/>
                     <Enum Name="AgMD1TriggerTV" Value="AgMD1TriggerTV"/>
                     <Enum Name="AgMD1TriggerImmediate" Value="AgMD1TriggerImmediate"/>
                     <Enum Name="AgMD1TriggerMagnitude" Value="AgMD1TriggerMagnitude"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerEdge</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The kind of event that triggers the digitizer. TV triggering requires External trigger source.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>trigger2source2</Name>
         <Description>IAgMD1TriggerSource2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger2Source21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Coupling</Name>
               <Location>trigger2source2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Coupling;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Coupling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerCouplingAC" Value="AgMD1TriggerCouplingAC"/>
                     <Enum Name="AgMD1TriggerCouplingDC" Value="AgMD1TriggerCouplingDC"/>
                     <Enum Name="AgMD1TriggerCouplingHFReject" Value="AgMD1TriggerCouplingHFReject"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerCouplingAC</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies how the digitizer couples the trigger source.</Description>
            </Property>
            <Property>
               <Name>ExtTrigRange</Name>
               <Location>trigger2source2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ExtTrigRange;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.ExtTrigRange = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The absolute value of the trigger signal range the digitizer can use for the external trigger input.  The units are Volts.  For example, to use a trigger signal spanning -5.0 to 5.0 volts, set Range to 10.0 volts.</Description>
            </Property>
            <Property>
               <Name>Hysteresis</Name>
               <Location>trigger2source2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Hysteresis;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Hysteresis = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the trigger hysteresis in Volts.</Description>
            </Property>
            <Property>
               <Name>Level</Name>
               <Location>trigger2source2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Level;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Level = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the voltage threshold for the trigger sub-system. The units are Volts. This attribute affects instrument behavior only when the Trigger Type is set to one of the following values: Edge or Magnitude.  This attribute, along with the Trigger Slope,</Description>
            </Property>
            <Property>
               <Name>Trigger2Source2Type</Name>
               <Location>trigger2source2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerEdge" Value="AgMD1TriggerEdge"/>
                     <Enum Name="AgMD1TriggerTV" Value="AgMD1TriggerTV"/>
                     <Enum Name="AgMD1TriggerImmediate" Value="AgMD1TriggerImmediate"/>
                     <Enum Name="AgMD1TriggerMagnitude" Value="AgMD1TriggerMagnitude"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerEdge</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The kind of event that triggers the digitizer. TV triggering requires External trigger source.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>trigger2source2edge</Name>
         <Description>AgMD1 instrument-specific edge triggering interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger2Source2Edge1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Slope</Name>
               <Location>trigger2source2edge</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Edge;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Edge;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerSlopeNegative" Value="AgMD1TriggerSlopeNegative"/>
                     <Enum Name="AgMD1TriggerSlopePositive" Value="AgMD1TriggerSlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerSlopeNegative</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether a rising or a falling edge triggers the digitizer.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>trigger2source2edge</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Level, Slope)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger2;
comobj = comobj.Sources2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Edge;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Level), Slope);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function sets the edge triggering attributes. An edge trigger occurs when the trigger signal that the end-user specifies with the Source parameter passes through the voltage threshold that the end-user specifies with the level parameter and has the s</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger2source2magnitude</Name>
         <Description>IAgMD1TriggerMagnitude interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger2Source2Magnitude1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Slope</Name>
               <Location>trigger2source2magnitude</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Magnitude;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Magnitude;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerSlopeNegative" Value="AgMD1TriggerSlopeNegative"/>
                     <Enum Name="AgMD1TriggerSlopePositive" Value="AgMD1TriggerSlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerSlopeNegative</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether a rising (Positive) or a falling (Negative) magnitude triggers the digitizer.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>trigger2source2magnitude</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Level, Hysteresis, Slope)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger2;
comobj = comobj.Sources2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Magnitude;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Level), double(Hysteresis), Slope);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function sets the magnitude triggering attributes when used with a down-converted Digital Downconverter (DDC) signal.  The magnitude trigger function operates in a similar manner to an edge trigger in that it triggers when the Threshold value is pass</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger2source2tv</Name>
         <Description>AgMD1 instrument-specific TV triggering interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger2Source2TV1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Event</Name>
               <Location>trigger2source2tv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.Event;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.Event = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TVTriggerEventField1" Value="AgMD1TVTriggerEventField1"/>
                     <Enum Name="AgMD1TVTriggerEventField2" Value="AgMD1TVTriggerEventField2"/>
                     <Enum Name="AgMD1TVTriggerEventLineNumber" Value="AgMD1TVTriggerEventLineNumber"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TVTriggerEventField1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the event on which the digitizer triggers.</Description>
            </Property>
            <Property>
               <Name>LineNumber</Name>
               <Location>trigger2source2tv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.LineNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.LineNumber = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the line on which the digitizer triggers. The driver uses this attribute when the TV Trigger Event is set to TV Event Line Number. The line number setting is independent of the field. This means that to trigger on the first line of the second fi</Description>
            </Property>
            <Property>
               <Name>Polarity</Name>
               <Location>trigger2source2tv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.Polarity;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.Polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TVTriggerPolarityPositive" Value="AgMD1TVTriggerPolarityPositive"/>
                     <Enum Name="AgMD1TVTriggerPolarityNegative" Value="AgMD1TVTriggerPolarityNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TVTriggerPolarityPositive</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the polarity of the TV signal.</Description>
            </Property>
            <Property>
               <Name>SignalFormat</Name>
               <Location>trigger2source2tv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.SignalFormat;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.SignalFormat = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TVSignalFormatNTSC" Value="AgMD1TVSignalFormatNTSC"/>
                     <Enum Name="AgMD1TVSignalFormatPAL" Value="AgMD1TVSignalFormatPAL"/>
                     <Enum Name="AgMD1TVSignalFormatSECAM" Value="AgMD1TVSignalFormatSECAM"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TVSignalFormatNTSC</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the format of TV signal on which the digitizer triggers.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>trigger2source2tv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, SignalFormat, Event, Polarity)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger2;
comobj = comobj.Sources2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.TV;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(SignalFormat, Event, Polarity);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the digitizer for TV triggering. It configures the TV signal format, the event and the signal polarity.  This function affects instrument behavior only if the trigger type is TV Trigger. Set the Trigger Type and Trigger Coupling b</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger2sourceedge</Name>
         <Description>AgMD1 instrument-specific edge triggering interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger2SourceEdge1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Slope</Name>
               <Location>trigger2sourceedge</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Edge;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Edge;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerSlopeNegative" Value="AgMD1TriggerSlopeNegative"/>
                     <Enum Name="AgMD1TriggerSlopePositive" Value="AgMD1TriggerSlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerSlopeNegative</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether a rising or a falling edge triggers the digitizer.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>trigger2sourceedge</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Level, Slope)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger2;
comobj = comobj.Sources;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Edge;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Level), Slope);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function sets the edge triggering attributes. An edge trigger occurs when the trigger signal that the end-user specifies with the Source parameter passes through the voltage threshold that the end-user specifies with the level parameter and has the s</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger2sources</Name>
         <Description>AgMD1 instrument-specific trigger sources repeated capability collection interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger2Sources1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>trigger2sources</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the number of TriggerSources.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Item</Name>
               <Location>trigger2sources</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger2;
comobj = comobj.Sources;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgMD1TriggerSource interface.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>trigger2sources</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger2;
comobj = comobj.Sources;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Returns the TriggerSource name for a given index.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger2sources2</Name>
         <Description>IAgMD1TriggerSources2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger2Sources21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>trigger2sources2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources2;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the number of TriggerSources.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Item</Name>
               <Location>trigger2sources2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger2;
comobj = comobj.Sources2;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgMD1TriggerSource interface.</Description>
            </Method>
            <Method>
               <Name>Item2</Name>
               <Location>trigger2sources2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item2(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger2;
comobj = comobj.Sources2;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item2(Name, varargin{:});
end
[Val] = comobj.Item2(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgMD1TriggerSource interface.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>trigger2sources2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger2;
comobj = comobj.Sources2;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Returns the TriggerSource name for a given index.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger2sourcetv</Name>
         <Description>AgMD1 instrument-specific TV triggering interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger2SourceTV1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Event</Name>
               <Location>trigger2sourcetv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.Event;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.Event = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TVTriggerEventField1" Value="AgMD1TVTriggerEventField1"/>
                     <Enum Name="AgMD1TVTriggerEventField2" Value="AgMD1TVTriggerEventField2"/>
                     <Enum Name="AgMD1TVTriggerEventLineNumber" Value="AgMD1TVTriggerEventLineNumber"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TVTriggerEventField1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the event on which the digitizer triggers.</Description>
            </Property>
            <Property>
               <Name>LineNumber</Name>
               <Location>trigger2sourcetv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.LineNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.LineNumber = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the line on which the digitizer triggers. The driver uses this attribute when the TV Trigger Event is set to TV Event Line Number. The line number setting is independent of the field. This means that to trigger on the first line of the second fi</Description>
            </Property>
            <Property>
               <Name>Polarity</Name>
               <Location>trigger2sourcetv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.Polarity;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.Polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TVTriggerPolarityPositive" Value="AgMD1TVTriggerPolarityPositive"/>
                     <Enum Name="AgMD1TVTriggerPolarityNegative" Value="AgMD1TVTriggerPolarityNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TVTriggerPolarityPositive</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the polarity of the TV signal.</Description>
            </Property>
            <Property>
               <Name>SignalFormat</Name>
               <Location>trigger2sourcetv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.SignalFormat;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger2;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.SignalFormat = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TVSignalFormatNTSC" Value="AgMD1TVSignalFormatNTSC"/>
                     <Enum Name="AgMD1TVSignalFormatPAL" Value="AgMD1TVSignalFormatPAL"/>
                     <Enum Name="AgMD1TVSignalFormatSECAM" Value="AgMD1TVSignalFormatSECAM"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TVSignalFormatNTSC</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the format of TV signal on which the digitizer triggers.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>trigger2sourcetv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, SignalFormat, Event, Polarity)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger2;
comobj = comobj.Sources;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.TV;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(SignalFormat, Event, Polarity);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the digitizer for TV triggering. It configures the TV signal format, the event and the signal polarity.  This function affects instrument behavior only if the trigger type is TV Trigger. Set the Trigger Type and Trigger Coupling b</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger3</Name>
         <Description>IAgMD1Trigger3 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger31" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ActiveSource</Name>
               <Location>trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.ActiveSource;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.ActiveSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source the digitizer monitors for the trigger event. The value specified here must be one of the valid repeated capability names for the TriggerSource repeated capability (Channel&lt;n&gt;, External&lt;n&gt;) or "PXI_STAR".</Description>
            </Property>
            <Property>
               <Name>Delay</Name>
               <Location>trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.Delay;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.Delay = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the length of time from the trigger event to the first point in the waveform record. If the value is positive, the first point in the waveform record occurs after the trigger event. If the value is negative, the first point in the waveform recor</Description>
            </Property>
            <Property>
               <Name>Holdoff</Name>
               <Location>trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.Holdoff;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.Holdoff = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>-- NOT SUPPORTED -- Specifies the length of time the digitizer waits after it detects a trigger until the digitizer enables the trigger subsystem to detect another trigger. The units are seconds. The Trigger Holdoff attribute affects instrument operation </Description>
            </Property>
            <Property>
               <Name>Modifier</Name>
               <Location>trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.Modifier;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.Modifier = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerModifierNone" Value="AgMD1TriggerModifierNone"/>
                     <Enum Name="AgMD1TriggerModifierAuto" Value="AgMD1TriggerModifierAuto"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerModifierNone</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the trigger modifier. The trigger modifier determines the digitizer's behavior in the absence of the configured trigger.</Description>
            </Property>
            <Property>
               <Name>PxiTrigOutEnabled</Name>
               <Location>trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.PxiTrigOutEnabled;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.PxiTrigOutEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>If true, enables PXI trigger out signal.  Not allowed when ActiveSource is "PXI_STAR" as this uses the PXI signal as the trigger input.</Description>
            </Property>
            <Property>
               <Name>PxiTrigSlope</Name>
               <Location>trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	propertyValue = comobj.PxiTrigSlope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj.PxiTrigSlope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerSlopeNegative" Value="AgMD1TriggerSlopeNegative"/>
                     <Enum Name="AgMD1TriggerSlopePositive" Value="AgMD1TriggerSlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerSlopeNegative</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether a rising or a falling edge triggers the digitizer.  This attribute affects instrument operation only when the ActiveSource attribute is set to "PXI_STAR".</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>SendSoftwareTrigger</Name>
               <Location>trigger3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SendSoftwareTrigger(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
feature('COM_SafeArraySingleDim',1);
comobj.SendSoftwareTrigger();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Refer to IVI-3.3: Standard Cross-Class Capabilities Specification for the prototype and complete description of this function.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger3source</Name>
         <Description>AgMD1 instrument-specific trigger source interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3Source1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Coupling</Name>
               <Location>trigger3source</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Coupling;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Coupling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerCouplingAC" Value="AgMD1TriggerCouplingAC"/>
                     <Enum Name="AgMD1TriggerCouplingDC" Value="AgMD1TriggerCouplingDC"/>
                     <Enum Name="AgMD1TriggerCouplingHFReject" Value="AgMD1TriggerCouplingHFReject"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerCouplingAC</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies how the digitizer couples the trigger source.</Description>
            </Property>
            <Property>
               <Name>ExtTrigRange</Name>
               <Location>trigger3source</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ExtTrigRange;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.ExtTrigRange = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The absolute value of the trigger signal range the digitizer can use for the external trigger input.  The units are Volts.  For example, to use a trigger signal spanning -5.0 to 5.0 volts, set Range to 10.0 volts.</Description>
            </Property>
            <Property>
               <Name>Hysteresis</Name>
               <Location>trigger3source</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Hysteresis;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Hysteresis = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the trigger hysteresis in Volts.</Description>
            </Property>
            <Property>
               <Name>Level</Name>
               <Location>trigger3source</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Level;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Level = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the voltage threshold for the trigger sub-system. The units are Volts. This attribute affects instrument behavior only when the Trigger Type is set to one of the following values: Edge or Magnitude.  This attribute, along with the Trigger Slope,</Description>
            </Property>
            <Property>
               <Name>Trigger3SourceType</Name>
               <Location>trigger3source</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerEdge" Value="AgMD1TriggerEdge"/>
                     <Enum Name="AgMD1TriggerTV" Value="AgMD1TriggerTV"/>
                     <Enum Name="AgMD1TriggerImmediate" Value="AgMD1TriggerImmediate"/>
                     <Enum Name="AgMD1TriggerMagnitude" Value="AgMD1TriggerMagnitude"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerEdge</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The kind of event that triggers the digitizer. TV triggering requires External trigger source.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>trigger3source2</Name>
         <Description>IAgMD1TriggerSource2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3Source21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Coupling</Name>
               <Location>trigger3source2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Coupling;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Coupling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerCouplingAC" Value="AgMD1TriggerCouplingAC"/>
                     <Enum Name="AgMD1TriggerCouplingDC" Value="AgMD1TriggerCouplingDC"/>
                     <Enum Name="AgMD1TriggerCouplingHFReject" Value="AgMD1TriggerCouplingHFReject"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerCouplingAC</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies how the digitizer couples the trigger source.</Description>
            </Property>
            <Property>
               <Name>ExtTrigRange</Name>
               <Location>trigger3source2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ExtTrigRange;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.ExtTrigRange = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The absolute value of the trigger signal range the digitizer can use for the external trigger input.  The units are Volts.  For example, to use a trigger signal spanning -5.0 to 5.0 volts, set Range to 10.0 volts.</Description>
            </Property>
            <Property>
               <Name>Hysteresis</Name>
               <Location>trigger3source2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Hysteresis;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Hysteresis = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the trigger hysteresis in Volts.</Description>
            </Property>
            <Property>
               <Name>Level</Name>
               <Location>trigger3source2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Level;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Level = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the voltage threshold for the trigger sub-system. The units are Volts. This attribute affects instrument behavior only when the Trigger Type is set to one of the following values: Edge or Magnitude.  This attribute, along with the Trigger Slope,</Description>
            </Property>
            <Property>
               <Name>Trigger3Source2Type</Name>
               <Location>trigger3source2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerEdge" Value="AgMD1TriggerEdge"/>
                     <Enum Name="AgMD1TriggerTV" Value="AgMD1TriggerTV"/>
                     <Enum Name="AgMD1TriggerImmediate" Value="AgMD1TriggerImmediate"/>
                     <Enum Name="AgMD1TriggerMagnitude" Value="AgMD1TriggerMagnitude"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerEdge</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The kind of event that triggers the digitizer. TV triggering requires External trigger source.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>trigger3source2edge</Name>
         <Description>AgMD1 instrument-specific edge triggering interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3Source2Edge1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Slope</Name>
               <Location>trigger3source2edge</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Edge;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Edge;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerSlopeNegative" Value="AgMD1TriggerSlopeNegative"/>
                     <Enum Name="AgMD1TriggerSlopePositive" Value="AgMD1TriggerSlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerSlopeNegative</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether a rising or a falling edge triggers the digitizer.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>trigger3source2edge</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Level, Slope)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Sources2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Edge;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Level), Slope);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function sets the edge triggering attributes. An edge trigger occurs when the trigger signal that the end-user specifies with the Source parameter passes through the voltage threshold that the end-user specifies with the level parameter and has the s</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger3source2magnitude</Name>
         <Description>IAgMD1TriggerMagnitude interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3Source2Magnitude1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Slope</Name>
               <Location>trigger3source2magnitude</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Magnitude;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Magnitude;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerSlopeNegative" Value="AgMD1TriggerSlopeNegative"/>
                     <Enum Name="AgMD1TriggerSlopePositive" Value="AgMD1TriggerSlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerSlopeNegative</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether a rising (Positive) or a falling (Negative) magnitude triggers the digitizer.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>trigger3source2magnitude</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Level, Hysteresis, Slope)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Sources2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Magnitude;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Level), double(Hysteresis), Slope);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function sets the magnitude triggering attributes when used with a down-converted Digital Downconverter (DDC) signal.  The magnitude trigger function operates in a similar manner to an edge trigger in that it triggers when the Threshold value is pass</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger3source2tv</Name>
         <Description>AgMD1 instrument-specific TV triggering interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3Source2TV1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Event</Name>
               <Location>trigger3source2tv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.Event;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.Event = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TVTriggerEventField1" Value="AgMD1TVTriggerEventField1"/>
                     <Enum Name="AgMD1TVTriggerEventField2" Value="AgMD1TVTriggerEventField2"/>
                     <Enum Name="AgMD1TVTriggerEventLineNumber" Value="AgMD1TVTriggerEventLineNumber"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TVTriggerEventField1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the event on which the digitizer triggers.</Description>
            </Property>
            <Property>
               <Name>LineNumber</Name>
               <Location>trigger3source2tv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.LineNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.LineNumber = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the line on which the digitizer triggers. The driver uses this attribute when the TV Trigger Event is set to TV Event Line Number. The line number setting is independent of the field. This means that to trigger on the first line of the second fi</Description>
            </Property>
            <Property>
               <Name>Polarity</Name>
               <Location>trigger3source2tv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.Polarity;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.Polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TVTriggerPolarityPositive" Value="AgMD1TVTriggerPolarityPositive"/>
                     <Enum Name="AgMD1TVTriggerPolarityNegative" Value="AgMD1TVTriggerPolarityNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TVTriggerPolarityPositive</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the polarity of the TV signal.</Description>
            </Property>
            <Property>
               <Name>SignalFormat</Name>
               <Location>trigger3source2tv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.SignalFormat;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources2;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.SignalFormat = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TVSignalFormatNTSC" Value="AgMD1TVSignalFormatNTSC"/>
                     <Enum Name="AgMD1TVSignalFormatPAL" Value="AgMD1TVSignalFormatPAL"/>
                     <Enum Name="AgMD1TVSignalFormatSECAM" Value="AgMD1TVSignalFormatSECAM"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TVSignalFormatNTSC</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the format of TV signal on which the digitizer triggers.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>trigger3source2tv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, SignalFormat, Event, Polarity)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Sources2;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.TV;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(SignalFormat, Event, Polarity);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the digitizer for TV triggering. It configures the TV signal format, the event and the signal polarity.  This function affects instrument behavior only if the trigger type is TV Trigger. Set the Trigger Type and Trigger Coupling b</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger3source3</Name>
         <Description>IAgMD1TriggerSource3 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3Source31" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Coupling</Name>
               <Location>trigger3source3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Coupling;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Coupling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerCouplingAC" Value="AgMD1TriggerCouplingAC"/>
                     <Enum Name="AgMD1TriggerCouplingDC" Value="AgMD1TriggerCouplingDC"/>
                     <Enum Name="AgMD1TriggerCouplingHFReject" Value="AgMD1TriggerCouplingHFReject"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerCouplingAC</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies how the digitizer couples the trigger source.</Description>
            </Property>
            <Property>
               <Name>ExtTrigRange</Name>
               <Location>trigger3source3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ExtTrigRange;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.ExtTrigRange = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The absolute value of the trigger signal range the digitizer can use for the external trigger input.  The units are Volts.  For example, to use a trigger signal spanning -5.0 to 5.0 volts, set Range to 10.0 volts.</Description>
            </Property>
            <Property>
               <Name>Hysteresis</Name>
               <Location>trigger3source3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Hysteresis;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Hysteresis = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the trigger hysteresis in Volts.</Description>
            </Property>
            <Property>
               <Name>Level</Name>
               <Location>trigger3source3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Level;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Level = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the voltage threshold for the trigger sub-system. The units are Volts. This attribute affects instrument behavior only when the Trigger Type is set to one of the following values: Edge or Magnitude.  This attribute, along with the Trigger Slope,</Description>
            </Property>
            <Property>
               <Name>Trigger3Source3Type</Name>
               <Location>trigger3source3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerEdge" Value="AgMD1TriggerEdge"/>
                     <Enum Name="AgMD1TriggerTV" Value="AgMD1TriggerTV"/>
                     <Enum Name="AgMD1TriggerImmediate" Value="AgMD1TriggerImmediate"/>
                     <Enum Name="AgMD1TriggerMagnitude" Value="AgMD1TriggerMagnitude"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerEdge</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The kind of event that triggers the digitizer. TV triggering requires External trigger source.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>trigger3source3edge</Name>
         <Description>AgMD1 instrument-specific edge triggering interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3Source3Edge1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Slope</Name>
               <Location>trigger3source3edge</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Edge;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Edge;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerSlopeNegative" Value="AgMD1TriggerSlopeNegative"/>
                     <Enum Name="AgMD1TriggerSlopePositive" Value="AgMD1TriggerSlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerSlopeNegative</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether a rising or a falling edge triggers the digitizer.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>trigger3source3edge</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Level, Slope)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Sources3;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Edge;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Level), Slope);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function sets the edge triggering attributes. An edge trigger occurs when the trigger signal that the end-user specifies with the Source parameter passes through the voltage threshold that the end-user specifies with the level parameter and has the s</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger3source3magnitude</Name>
         <Description>IAgMD1TriggerMagnitude interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3Source3Magnitude1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Slope</Name>
               <Location>trigger3source3magnitude</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Magnitude;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Magnitude;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerSlopeNegative" Value="AgMD1TriggerSlopeNegative"/>
                     <Enum Name="AgMD1TriggerSlopePositive" Value="AgMD1TriggerSlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerSlopeNegative</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether a rising (Positive) or a falling (Negative) magnitude triggers the digitizer.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>trigger3source3magnitude</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Level, Hysteresis, Slope)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Sources3;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Magnitude;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Level), double(Hysteresis), Slope);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function sets the magnitude triggering attributes when used with a down-converted Digital Downconverter (DDC) signal.  The magnitude trigger function operates in a similar manner to an edge trigger in that it triggers when the Threshold value is pass</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger3source3magnitude2</Name>
         <Description>IAgMD1TriggerMagnitude2 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3Source3Magnitude21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>DwellTimeSamples</Name>
               <Location>trigger3source3magnitude2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Magnitude2;
	propertyValue = comobj.DwellTimeSamples;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Magnitude2;
	comobj.DwellTimeSamples = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Positive values of dwell time indicate the number of samples that must be in the initial trigger state (e.g. below the low threshold for a rising edge trigger) before a trigger will be recognized.  Negative values of dwell time indicate the number of samp</Description>
            </Property>
            <Property>
               <Name>Slope</Name>
               <Location>trigger3source3magnitude2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Magnitude2;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Magnitude2;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerSlopeNegative" Value="AgMD1TriggerSlopeNegative"/>
                     <Enum Name="AgMD1TriggerSlopePositive" Value="AgMD1TriggerSlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerSlopeNegative</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether a rising (Positive) or a falling (Negative) magnitude triggers the digitizer.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>trigger3source3magnitude2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Level, Hysteresis, Slope)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Sources3;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Magnitude2;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Level), double(Hysteresis), Slope);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function sets the magnitude triggering attributes when used with a down-converted Digital Downconverter (DDC) signal.  The magnitude trigger function operates in a similar manner to an edge trigger in that it triggers when the Threshold value is pass</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger3source3tv</Name>
         <Description>AgMD1 instrument-specific TV triggering interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3Source3TV1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Event</Name>
               <Location>trigger3source3tv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.Event;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.Event = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TVTriggerEventField1" Value="AgMD1TVTriggerEventField1"/>
                     <Enum Name="AgMD1TVTriggerEventField2" Value="AgMD1TVTriggerEventField2"/>
                     <Enum Name="AgMD1TVTriggerEventLineNumber" Value="AgMD1TVTriggerEventLineNumber"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TVTriggerEventField1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the event on which the digitizer triggers.</Description>
            </Property>
            <Property>
               <Name>LineNumber</Name>
               <Location>trigger3source3tv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.LineNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.LineNumber = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the line on which the digitizer triggers. The driver uses this attribute when the TV Trigger Event is set to TV Event Line Number. The line number setting is independent of the field. This means that to trigger on the first line of the second fi</Description>
            </Property>
            <Property>
               <Name>Polarity</Name>
               <Location>trigger3source3tv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.Polarity;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.Polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TVTriggerPolarityPositive" Value="AgMD1TVTriggerPolarityPositive"/>
                     <Enum Name="AgMD1TVTriggerPolarityNegative" Value="AgMD1TVTriggerPolarityNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TVTriggerPolarityPositive</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the polarity of the TV signal.</Description>
            </Property>
            <Property>
               <Name>SignalFormat</Name>
               <Location>trigger3source3tv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.SignalFormat;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.SignalFormat = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TVSignalFormatNTSC" Value="AgMD1TVSignalFormatNTSC"/>
                     <Enum Name="AgMD1TVSignalFormatPAL" Value="AgMD1TVSignalFormatPAL"/>
                     <Enum Name="AgMD1TVSignalFormatSECAM" Value="AgMD1TVSignalFormatSECAM"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TVSignalFormatNTSC</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the format of TV signal on which the digitizer triggers.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>trigger3source3tv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, SignalFormat, Event, Polarity)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Sources3;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.TV;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(SignalFormat, Event, Polarity);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the digitizer for TV triggering. It configures the TV signal format, the event and the signal polarity.  This function affects instrument behavior only if the trigger type is TV Trigger. Set the Trigger Type and Trigger Coupling b</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger3sourceedge</Name>
         <Description>AgMD1 instrument-specific edge triggering interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3SourceEdge1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Slope</Name>
               <Location>trigger3sourceedge</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Edge;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Edge;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerSlopeNegative" Value="AgMD1TriggerSlopeNegative"/>
                     <Enum Name="AgMD1TriggerSlopePositive" Value="AgMD1TriggerSlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerSlopeNegative</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether a rising or a falling edge triggers the digitizer.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>trigger3sourceedge</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Level, Slope)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Sources;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Edge;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Level), Slope);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function sets the edge triggering attributes. An edge trigger occurs when the trigger signal that the end-user specifies with the Source parameter passes through the voltage threshold that the end-user specifies with the level parameter and has the s</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger3sources3</Name>
         <Description>IAgMD1TriggerSources3 interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3Sources31" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>trigger3sources3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources3;
	propertyValue = comobj.Count;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the number of TriggerSources.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Item</Name>
               <Location>trigger3sources3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Sources3;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[Val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgMD1TriggerSource interface.</Description>
            </Method>
            <Method>
               <Name>Item2</Name>
               <Location>trigger3sources3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item2(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Sources3;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item2(Name, varargin{:});
end
[Val] = comobj.Item2(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgMD1TriggerSource interface.</Description>
            </Method>
            <Method>
               <Name>Item3</Name>
               <Location>trigger3sources3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Item3(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Sources3;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item3(Name, varargin{:});
end
[Val] = comobj.Item3(Name);
</MCode>
               </Code>
               <Description>Pointer to the IAgMD1TriggerSource interface.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>trigger3sources3</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Sources3;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[Val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Returns the TriggerSource name for a given index.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger3sourcetv</Name>
         <Description>AgMD1 instrument-specific TV triggering interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger3SourceTV1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Event</Name>
               <Location>trigger3sourcetv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.Event;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.Event = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TVTriggerEventField1" Value="AgMD1TVTriggerEventField1"/>
                     <Enum Name="AgMD1TVTriggerEventField2" Value="AgMD1TVTriggerEventField2"/>
                     <Enum Name="AgMD1TVTriggerEventLineNumber" Value="AgMD1TVTriggerEventLineNumber"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TVTriggerEventField1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the event on which the digitizer triggers.</Description>
            </Property>
            <Property>
               <Name>LineNumber</Name>
               <Location>trigger3sourcetv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.LineNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.LineNumber = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the line on which the digitizer triggers. The driver uses this attribute when the TV Trigger Event is set to TV Event Line Number. The line number setting is independent of the field. This means that to trigger on the first line of the second fi</Description>
            </Property>
            <Property>
               <Name>Polarity</Name>
               <Location>trigger3sourcetv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.Polarity;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.Polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TVTriggerPolarityPositive" Value="AgMD1TVTriggerPolarityPositive"/>
                     <Enum Name="AgMD1TVTriggerPolarityNegative" Value="AgMD1TVTriggerPolarityNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TVTriggerPolarityPositive</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the polarity of the TV signal.</Description>
            </Property>
            <Property>
               <Name>SignalFormat</Name>
               <Location>trigger3sourcetv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.SignalFormat;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger3;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.SignalFormat = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TVSignalFormatNTSC" Value="AgMD1TVSignalFormatNTSC"/>
                     <Enum Name="AgMD1TVSignalFormatPAL" Value="AgMD1TVSignalFormatPAL"/>
                     <Enum Name="AgMD1TVSignalFormatSECAM" Value="AgMD1TVSignalFormatSECAM"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TVSignalFormatNTSC</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the format of TV signal on which the digitizer triggers.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>trigger3sourcetv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, SignalFormat, Event, Polarity)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger3;
comobj = comobj.Sources;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.TV;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(SignalFormat, Event, Polarity);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the digitizer for TV triggering. It configures the TV signal format, the event and the signal polarity.  This function affects instrument behavior only if the trigger type is TV Trigger. Set the Trigger Type and Trigger Coupling b</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>triggersource</Name>
         <Description>AgMD1 instrument-specific trigger source interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerSource1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Coupling</Name>
               <Location>triggersource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Coupling;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Coupling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerCouplingAC" Value="AgMD1TriggerCouplingAC"/>
                     <Enum Name="AgMD1TriggerCouplingDC" Value="AgMD1TriggerCouplingDC"/>
                     <Enum Name="AgMD1TriggerCouplingHFReject" Value="AgMD1TriggerCouplingHFReject"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerCouplingAC</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies how the digitizer couples the trigger source.</Description>
            </Property>
            <Property>
               <Name>ExtTrigRange</Name>
               <Location>triggersource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ExtTrigRange;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.ExtTrigRange = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The absolute value of the trigger signal range the digitizer can use for the external trigger input.  The units are Volts.  For example, to use a trigger signal spanning -5.0 to 5.0 volts, set Range to 10.0 volts.</Description>
            </Property>
            <Property>
               <Name>Hysteresis</Name>
               <Location>triggersource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Hysteresis;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Hysteresis = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the trigger hysteresis in Volts.</Description>
            </Property>
            <Property>
               <Name>Level</Name>
               <Location>triggersource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Level;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Level = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the voltage threshold for the trigger sub-system. The units are Volts. This attribute affects instrument behavior only when the Trigger Type is set to one of the following values: Edge or Magnitude.  This attribute, along with the Trigger Slope,</Description>
            </Property>
            <Property>
               <Name>TriggerSourceType</Name>
               <Location>triggersource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Type;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerEdge" Value="AgMD1TriggerEdge"/>
                     <Enum Name="AgMD1TriggerTV" Value="AgMD1TriggerTV"/>
                     <Enum Name="AgMD1TriggerImmediate" Value="AgMD1TriggerImmediate"/>
                     <Enum Name="AgMD1TriggerMagnitude" Value="AgMD1TriggerMagnitude"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerEdge</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The kind of event that triggers the digitizer. TV triggering requires External trigger source.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>triggersourceedge</Name>
         <Description>AgMD1 instrument-specific edge triggering interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerSourceEdge1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Slope</Name>
               <Location>triggersourceedge</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Edge;
	propertyValue = comobj.Slope;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.Edge;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TriggerSlopeNegative" Value="AgMD1TriggerSlopeNegative"/>
                     <Enum Name="AgMD1TriggerSlopePositive" Value="AgMD1TriggerSlopePositive"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TriggerSlopeNegative</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether a rising or a falling edge triggers the digitizer.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>triggersourceedge</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Level, Slope)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
comobj = comobj.Sources;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.Edge;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Level), Slope);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function sets the edge triggering attributes. An edge trigger occurs when the trigger signal that the end-user specifies with the Source parameter passes through the voltage threshold that the end-user specifies with the level parameter and has the s</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>triggersourcetv</Name>
         <Description>AgMD1 instrument-specific TV triggering interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerSourceTV1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Event</Name>
               <Location>triggersourcetv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.Event;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.Event = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TVTriggerEventField1" Value="AgMD1TVTriggerEventField1"/>
                     <Enum Name="AgMD1TVTriggerEventField2" Value="AgMD1TVTriggerEventField2"/>
                     <Enum Name="AgMD1TVTriggerEventLineNumber" Value="AgMD1TVTriggerEventLineNumber"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TVTriggerEventField1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the event on which the digitizer triggers.</Description>
            </Property>
            <Property>
               <Name>LineNumber</Name>
               <Location>triggersourcetv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.LineNumber;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.LineNumber = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the line on which the digitizer triggers. The driver uses this attribute when the TV Trigger Event is set to TV Event Line Number. The line number setting is independent of the field. This means that to trigger on the first line of the second fi</Description>
            </Property>
            <Property>
               <Name>Polarity</Name>
               <Location>triggersourcetv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.Polarity;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.Polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TVTriggerPolarityPositive" Value="AgMD1TVTriggerPolarityPositive"/>
                     <Enum Name="AgMD1TVTriggerPolarityNegative" Value="AgMD1TVTriggerPolarityNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TVTriggerPolarityPositive</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the polarity of the TV signal.</Description>
            </Property>
            <Property>
               <Name>SignalFormat</Name>
               <Location>triggersourcetv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	propertyValue = comobj.SignalFormat;
catch
	error('An error occurred while accessing the property');
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj = comobj.TV;
	comobj.SignalFormat = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgMD1TVSignalFormatNTSC" Value="AgMD1TVSignalFormatNTSC"/>
                     <Enum Name="AgMD1TVSignalFormatPAL" Value="AgMD1TVSignalFormatPAL"/>
                     <Enum Name="AgMD1TVSignalFormatSECAM" Value="AgMD1TVSignalFormatSECAM"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AgMD1TVSignalFormatNTSC</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the format of TV signal on which the digitizer triggers.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>triggersourcetv</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, SignalFormat, Event, Polarity)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
comobj = comobj.Sources;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
comobj = comobj.TV;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(SignalFormat, Event, Polarity);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the digitizer for TV triggering. It configures the TV signal format, the event and the signal polarity.  This function affects instrument behavior only if the trigger type is TV Trigger. Set the Trigger Type and Trigger Coupling b</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>utility</Name>
         <Description>IVI Driver utility interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Utility1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>Disable</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Disable(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
comobj.Disable();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Quickly places the instrument in a state where it has no, or minimal, effect on the external system to which it is connected.  This state is not necessarily a known state.</Description>
            </Method>
            <Method>
               <Name>ErrorQuery</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ErrorCode, ErrorMessage] = ErrorQuery(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
[ErrorCode, ErrorMessage] = comobj.ErrorQuery(0, '');
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Queries the instrument and returns instrument specific error information.  This function can be used when QueryInstrumentStatus is True to retrieve error details when the driver detects an instrument error.</Description>
            </Method>
            <Method>
               <Name>LockObject</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function LockObject(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
comobj.LockObject();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Obtains a multithread lock on the driver after waiting until all other execution threads have released their locks on the instrument session.</Description>
            </Method>
            <Method>
               <Name>Reset</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Reset(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
comobj.Reset();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Places the instrument in a known state and configures instrument options on which the IVI specific driver depends (for example, enabling/disabling headers).  For an IEEE 488.2 instrument, Reset sends the command string *RST to the instrument.</Description>
            </Method>
            <Method>
               <Name>ResetWithDefaults</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ResetWithDefaults(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
comobj.ResetWithDefaults();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Does the equivalent of Reset and then, (1) disables class extension capability groups, (2) sets attributes to initial values defined by class specs, and (3) configures the driver to option string settings used when Initialize was last executed.</Description>
            </Method>
            <Method>
               <Name>SelfTest</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [TestResult, TestMessage] = SelfTest(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
[TestResult, TestMessage] = comobj.SelfTest(0, '');
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Performs an instrument self test, waits for the instrument to complete the test, and queries the instrument for the results.  If the instrument passes the test, TestResult is zero and TestMessage is 'Self test passed'.</Description>
            </Method>
            <Method>
               <Name>UnlockObject</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function UnlockObject(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
comobj.UnlockObject();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Releases a previously obtained mutlithread lock.</Description>
            </Method>
         </MethodInfo>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>