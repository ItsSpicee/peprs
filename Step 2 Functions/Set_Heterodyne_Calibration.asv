function Set_Heterodyne_Calibration(dict)
load('./Measurement Data/Heterodyne Calibration Parameters/Cal.mat')

ToneSpacing = str2double(dict.ToneSpacing);
StartingToneFreq = str2double(dict.StartingToneFreq);
EndingToneFreq = str2double(dict.EndingToneFreq);
PAPRmin = str2double(dict.PAPRmin);
PAPRmax = str2double(dict.PAPRmax);
FreqRes= str2double(dict.FreqRes);
NumIterations = str2double(dict.NumIterations);

Cal.Signal.ToneSpacing = ToneSpacing;  
Cal.Signal.StartingToneFreq = StartingToneFreq;
Cal.Signal.EndingToneFreq = EndingToneFreq;

% Optional Multitone Settings
if dict.RealBasisFlag == 1
    Cal.Signal.MultitoneOptions.RealBasisFlag = 1;
else
   Cal.Signal.MultitoneOptions.RealBasisFlag = 0; 
end
if dict.PhaseDistr == 1
    Cal.Signal.MultitoneOptions.PhaseDistr = 'Schroeder';
else
    Cal.Signal.MultitoneOptions.PhaseDistr = 'Gaussian';
end

% PAPR limits when generating the signals
Cal.Signal.MultitoneOptions.PAPRmin  = PAPRmin;
Cal.Signal.MultitoneOptions.PAPRmax  = PAPRmax;

Cal.FreqRes = FreqRes; % Frequency resolution to use to search for the tones

Cal.NumIterations = NumIterations; % Training length to use for getting the LUT table

% Receiver calibration files
if rxCalFlag == 1
    Cal.RX.Calflag = ;
else
    Cal.RX.Calflag = false;
end
Cal.RX.CalFile = '.\RX_CalResults\RX_CalResults_fc6r25GHz_BW3GHz.mat';


save('./Measurement Data/Heterodyne Calibration Parameters/Cal.mat','Cal')
end